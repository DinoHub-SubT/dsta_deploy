####################################################################################################
# robot 2 configuration file
- r2:
####################################################################################################

  ##################################################################################################
  - nuc:
  ##################################################################################################
    - 'export YELLOW="\033[1;33m"'
    - 'export BLUE="\033[1;36m"'
    - 'export RESET="\033[0m"'

    ################################################################################################
    # copy deploy repo from basestation to r2.nuc
    - transfer:
    ################################################################################################
      
      ### == user can modify ==
      
      # connections
      - 'export host=nuc'
      - 'export user=nuc'
      - 'export HOP_HOST=ugv2@ugv2'
      
      # paths
      - 'export LOCAL_DEPLOY_PATH=/home/$USER/deploy_ws/src'
      - 'export REMOTE_DEPLOY_PATH=/home/$user/deploy_ws/'
      
      # rsync options
      - 'export copy_opts="-avzh --delete --exclude=src/perception --exclude=src/launch/ugv_setup/logging/nuc/bags" '
      - export copy_to="rsync $copy_opts $LOCAL_DEPLOY_PATH -e 'ssh $HOP_HOST -i ~/.ssh/deploy ssh ' $user@$host:$REMOTE_DEPLOY_PATH "
      - export copy_from="rsync $copy_opts $user@$host:$REMOTE_DEPLOY_PATH $LOCAL_DEPLOY_PATH "

      ### == user can modify done. ==

      ####################################################
      # perform actual transfer. do not change.
      ####################################################
      - print:
        # print
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;
        - echo -e "\n${YELLOW}\t transfer to -> \t $copy_to \n" ;

      - transfer:
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;

        # transfer TO remote host
        - to:
          # create the remote directory
          - ssh $HOP_HOST -i ~/.ssh/deploy ssh $user@$host "mkdir -p $REMOTE_DEPLOY_PATH"
          
          # copy command
          - 'export copy_cmd=$copy_to'

        # transfer FROM remote host
        - from:
          - 'export copy_cmd=$copy_from'

        # evaluate copy
        - echo -e "\n${YELLOW}\t copy command -> \t $copy_cmd \n"
        - eval $copy_cmd
      
      # delete remote deploy workspace
      - delete:
        - ssh $HOP_HOST -i ~/.ssh/deploy ssh $user@$host "rm -rf $REMOTE_DEPLOY_PATH"

    ################################################################################################
    - docker:
    ################################################################################################
      - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
      - +ssh:{ nuc:nuc:/home/nuc/.ssh/deploy }

      ####################################################
      # setup
      ####################################################
      - hostname
      - whoami
      - pwd
      
      ####################################################
      # path setup
      - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
      - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
      - 'export DOCKER_CONFIG=field/robot/nuc'
      - 'export DOCKER_CONFIG_PATH=docker/env'
      
      ####################################################
      # print docker configuration information
      ####################################################
      - print:
        - echo -e "\n${BLUE} == Docker images to create == \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/robot/nuc.config \n" ;
        - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
        - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
        - while IFS= read line;
          do 
            echo -e ${BLUE} "\t$line";
          done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - image:
        - 'export BUILD_ARGS="--force" '
        - osrf:
          - echo $LANG
          - ./build.bash --env local/osrf/ros $BUILD_ARGS
          - ./build.bash --env local/osrf/osrf $BUILD_ARGS
        - subt:
          - ./build.bash --env local/subt/ros $BUILD_ARGS
          - ./build.bash --env field/robot/nuc $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" --no-nvidia " '
        - ./run.bash --env field/robot/nuc $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/robot/nuc $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/robot/nuc $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - delete:
        - 'export DELETE_ARGS="--containers" '
        - ./clean.bash --env field/robot/nuc $DELETE_ARGS
        - ./clean.bash --env local/subt/ros $DELETE_ARGS
        - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
        - ./clean.bash --env local/osrf/ros $DELETE_ARGS
      
      ####################################################
      # misc.
      ####################################################
      - dangling:
        - docker rmi -f $(docker images -f "dangling=true" -q)
      
    ################################################################################################
    - deploy:
    ################################################################################################
      # only docker container on basestation, no ssh
      - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
      - +ssh:{ nuc:nuc:/home/nuc/.ssh/deploy }
      - +docker:subt
      
      - hostname
      - whoami
      - pwd
      - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
      - 'export DEPLOY_WS=/home/developer/deploy_ws/'
      - cd $DEPLOY_SRC
  
      ####################################################
      # clone workspaces
      ####################################################
      - clone:

        # download the subt_robot_examples_latest
        # NOTE: only do this on ONCE. requires internet access.
        - download:
          - if [ -f subt_robot_examples_latest.tgz ]; then
              rm subt_robot_examples_latest.tgz;
            fi
          - wget --no-check-certificate https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz

        # clone & update the planning workspace
        - cd planning/
        
        # setup the rosinstalls
        - rosinstall:
          - planning:
            - thirdparty:
              - cd thirdparty/catkin
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/thirdparty.rosinstall .rosinstall
            - repo:
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/planning.rosinstall .rosinstall
            - hardware:
              - cd hardware/catkin
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/hardware.rosinstall .rosinstall
          - state_est:
            - cd $DEPLOY_SRC/state_estimation
            - xsens:
              - cd xsens/catkin
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/state_est/xsens.rosinstall .rosinstall
            - repo:
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/state_est/state_est.rosinstall .rosinstall
            - thirdparty:
              - cd thirdparty/catkin
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/state_est/thirdparty.rosinstall .rosinstall
            - loam:
              - cd loam/catkin
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/state_est/loam.rosinstall .rosinstall

        # wstool update the workspaces
        - up:
          - planning:
            - thirdparty:
              - cd thirdparty/catkin
              - wstool info
              - wstool update
            - repo:
              - wstool info
              - wstool update
            - hardware:
              - cd hardware/catkin
              - wstool info
              - wstool update
          - state_est:
            - cd $DEPLOY_SRC/state_estimation
            - xsens:
              - cd xsens/catkin
              - wstool info
              - wstool update
            - repo:
              - wstool info
              - wstool update
            - thirdparty:
              - cd thirdparty/catkin
              - wstool info
              - wstool update
            - loam:
              - cd loam/catkin
              - wstool info
              - wstool update

      ####################################################
      # rosdep
      # -- assumes the extended ws are already built
      # -- add only those repos that need rosdep
      ####################################################
      - rosdep:
        # install any thirdparty deps
        - cd planning
        - planning:
          - ./Planning_workspace/install_dependencies.sh
        - hardware:
          - source $DEPLOY_WS/devel/planning/hardware/setup.bash
          - cd $DEPLOY_SRC/state_estimation/thirdparty/catkin
          - rosdep install --from-paths . --ignore-src --rosdistro melodic -y
        - xsens:
          - cd $DEPLOY_SRC/state_estimation/xsens/catkin/xsens_cpp_driver/receive_xsens/config/mt_sdk
          - sudo ./mt_sdk_4.8.sh
        
      ####################################################
      # build workspaces
      ####################################################
      - build:
        - planning:
          - cd planning/

          # build the hardware workspace
          - thirdparty:
            - cd thirdparty/catkin
            - catkin build

          # build planning workspace
          - repo:
            - catkin build --force-cmake

          # build the hardware workspace
          - hardware:
            - cd hardware/catkin
            - catkin build --force-cmake

          # build launch workspace
          - launch:
            - cd $DEPLOY_SRC/launch/
            - catkin profile set planning
            - catkin clean -b --yes
            - catkin build --force-cmake

        # build the state_est
        - state_est:
          - cd $DEPLOY_SRC/state_estimation/
          - thirdparty:
            - cd thirdparty/catkin
            - catkin build --force-cmake
          - loam:
            - cd loam/catkin
            - catkin build --force-cmake
          - repo:
            - catkin build --force-cmake
          - xsens:
            - cd xsens/catkin
            - catkin build --force-cmake
          # build launch workspace
          - launch:
            - cd $DEPLOY_SRC/launch/
            - catkin profile set state_est
            - catkin clean -b --yes
            - catkin build --force-cmake

      ####################################################
      # clean workspaces
      ####################################################
      - clean:
        - planning:
          - launch:
            - cd $DEPLOY_SRC/launch/
            - catkin profile set planning
            - catkin clean -y
          - cd $DEPLOY_SRC/planning/
          - hardware:
            - cd hardware/catkin
            - catkin clean -y
          - repo:
            - catkin clean -y
          - thirdparty:
            - cd thirdparty/catkin
            - catkin clean -y
        - state_est:
          - launch:
            - cd $DEPLOY_SRC/launch/
            - catkin profile set state_est
            - catkin clean -y
          - cd $DEPLOY_SRC/state_estimation/
          - xsens:
            - cd xsens/catkin
            - catkin clean -y
          - repo:
            - catkin clean -y
          - loam:
            - cd loam/catkin
            - catkin clean -y
          - thirdparty:
            - cd thirdparty/catkin
            - catkin clean -y

      ####################################################
      # remove workspaces
      ####################################################
      - rm:
        - planning:
          - cd planning/
          - repo:
            - find . -maxdepth 1 \! \( -name thirdparty -o -name hardware -o -name .catkin_tools \) -exec rm -rf '{}' \;
          - hardware:
            - cd hardware/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - thirdparty:
            - cd thirdparty/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - state_est:
          - cd $DEPLOY_SRC/state_estimation/
          - repo:
            - find . -maxdepth 1 \! \( -name thirdparty -o -name loam -o -name .catkin_tools \) -exec rm -rf '{}' \;
          - thirdparty:
            - cd thirdparty/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - loam:
            - cd loam/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - xsens:
            - cd xsens/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;

      ####################################################
      # launch workspaces
      ####################################################
      - launch:
        ### == user can modify ==
        
        # launch configuration variables
        - 'export host=$(hostname)'
        - 'export MCAST_GROUP=224.0.0.251'
        - 'export UGV_NUC=true'
        - 'export USER=nuc'
        - 'export ROS_MASTER_URI=http://ugv2:11311'
        - 'export ROS_HOSTNAME=nuc'
        
        ### == user can modify done. ==

        # create the bag folder
        - mkdir -p $DEPLOY_SRC/launch/ugv_setup/logging/nuc/bags/

        # get launch configuration data
        - export CONFIG_PATH="$DEPLOY_SRC/launch/robot_launch_scripting/config/"
        # parse config file for roslaunch params
        - get_config_data() {
            CONFIG_FILE=$CONFIG_PATH/${1}.config;
            while IFS='' read -r line || [[ -n "$line" ]]; do
              if [ ! "${line:0:1}" == "#" ]; then
                config_data="$config_data $line ";
              fi
            done < "$CONFIG_FILE";
            echo ${config_data};
          }
        - export -f get_config_data
        
        - start:
          - planning:
            # start the tmux session
            - tmux new -s launch_planning -d
            # source
            - tmux send -t launch_planning 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER

            # manually set the tmux env vars...for now.
            - tmux send -t launch_planning 'unset config_data' ENTER
            - tmux send -t launch_planning 'export config=robots/r2/nuc/planning' ENTER
            - tmux send -t launch_planning 'export config_data=$(get_config_data "$config")' ENTER

            # run nuc launch
            - tmux send -t launch_planning 'mon launch robot_launch_scripting subt.launch $config_data' ENTER
            # message user
            - echo "Launch deployed in tmux session launch_planning"
          
          - state_est:
            # start the tmux session
            - tmux new -s launch_state_est -d
            # source
            - tmux send -t launch_state_est 'source $DEPLOY_WS/devel/state_estimation/launch/setup.bash' ENTER

            # manually set the tmux env vars...for now.
            - tmux send -t launch_state_est 'unset config_data' ENTER
            - tmux send -t launch_state_est 'export config=robots/r2/nuc/state_est' ENTER
            - tmux send -t launch_state_est 'export config_data=$(get_config_data "$config")' ENTER

            # run nuc launch
            - tmux send -t launch_state_est 'mon launch robot_launch_scripting subt.launch $config_data' ENTER
            # message user
            - echo "Launch deployed in tmux session launch_state_est"
          
          - rosbag:
            - recorder:  
              # start the recorder tmux session
              - tmux new -s launch_rosbag_recorder -d
              # source
              - tmux send -t launch_rosbag_recorder 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
              # manually set the tmux env vars...for now.
              - tmux send -t launch_rosbag_recorder 'unset config_data' ENTER
              - tmux send -t launch_rosbag_recorder 'export config=robots/r2/nuc/recorder' ENTER
              - tmux send -t launch_rosbag_recorder 'export config_data=$(get_config_data "$config")' ENTER
              # launch recorder
              - tmux send -t launch_rosbag_recorder 'mon launch robot_launch_scripting subt.launch computer:=nuc robot:=robots/logging $config_data' ENTER
            - bag:
              # start record hardware
              - tmux new -s launch_rosbag_start -d
              # source
              - tmux send -t launch_rosbag_start 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
              # manually set the tmux env vars...for now.
              - tmux send -t launch_rosbag_start 'unset config_data' ENTER
              - tmux send -t launch_rosbag_start 'export config=robots/r2/nuc/rosbag_start' ENTER
              - tmux send -t launch_rosbag_start 'export config_data=$(get_config_data "$config")' ENTER
              # launch rosbag
              - tmux send -t launch_rosbag_start 'roslaunch robot_launch_scripting subt.launch computer:=nuc robot:=robots/logging $config_data' ENTER
            # message user
            - echo "Launch deployed in tmux session launch_rosbag"
          
          - shell:
            # empty shell prompt
            - pwd
            - tmux new -s ros_shell -d
            - tmux send -t ros_shell 'source $DEPLOY_WS/devel/state_estimation/launch/setup.bash' ENTER

        # stop tmux sessions    
        - stop:
          # remove all the tmux sessions
          - state_est:
            - tmux kill-session -t launch_state_est
          - planning:
            - tmux kill-session -t launch_planning
          - shell:  
            - tmux kill-session -t ros_shell
          - rosbag:
            - stop:
              # start record hardware
              - tmux new -s launch_rosbag_stop -d
              # source
              - tmux send -t launch_rosbag_stop 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
              # manually set the tmux env vars...for now.
              - tmux send -t launch_rosbag_stop 'unset config_data' ENTER
              - tmux send -t launch_rosbag_stop 'export config=robots/r2/nuc/rosbag_stop' ENTER
              - tmux send -t launch_rosbag_stop 'export config_data=$(get_config_data "$config")' ENTER
              # launch rosbag
              - tmux send -t launch_rosbag_stop 'roslaunch robot_launch_scripting subt.launch computer:=nuc robot:=robots/logging $config_data' ENTER
              - tmux kill-session -t launch_rosbag_stop
            - recorder:
              - tmux kill-session -t launch_rosbag_recorder
            - bag:
              - tmux kill-session -t launch_rosbag_start

        - rosclean:
          # stop all ros nodes
          - source $DEPLOY_WS/devel/planning/repo/setup.bash
          - ps aux | grep ros
          - rosnode kill -a
          - pkill -f ros
          - rosnode list
          - ps aux | grep ros


      ####################################################
      # git updater
      ####################################################
      - git:
        - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
        - 'export DEPLOY_SRC=$DEPLOY_WS/src'
        
        # git status check          
        - git_status() {
            for repo in $1; do
              echo "repo is $repo";
              pushd $repo  > /dev/null 2>&1;
              if [ -d .git ]; then
                echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
                echo "hello world";
                echo -e "\n\n";
              fi;
              popd  > /dev/null 2>&1;
            done;
          }
        - export -f git_status
        - printenv

        ####################################################
        # git commands for planning workspace
        ####################################################
        - planning:
          - cd $DEPLOY_SRC/planning

          # git update to thirdparty ws
          - thirdparty:
            - status:
              - 'export -f git_fn=$git_status'
            - update:
              - 'export -f git_fn=$git_updater'
              
            - cd thirdparty/catkin
            - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
            - git_fn "$REPOS"

          # git update to repo ws
          - repo:
            - status:
              - 'export -f git_fn=$git_status'
            - update:
              - 'export -f git_fn=$git_updater'

            - export REPOS=$(find . -maxdepth 1 \! \( -name thirdparty -o -name hardware -o -name .catkin_tools -o -name .rosinstall \) )
            - git_fn "$REPOS"
          
        # update the planning repso
        - state_est:
          - cd $DEPLOY_SRC/state_estimation
          - thirdparty:
            - cd thirdparty/catkin
            - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
            - git_updater "$REPOS"
          - repo:
            - export REPOS=$(find . -maxdepth 1 \! \( -name thirdparty -o -name loam -o -name .catkin_tools -o -name .rosinstall \) )
            - git_updater "$REPOS"

    ################################################################################################
    - local:
    ################################################################################################
      # only docker container on basestation, no ssh
      - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
      - +ssh:{ nuc:nuc:/home/nuc/.ssh/deploy }
      # launch configuration variables
      - 'export host=$(hostname)'
      - 'export MCAST_GROUP=224.0.0.251'
      - 'export UGV_NUC=true'
      - 'export USER=nuc'
      - 'export ROS_MASTER_URI=http://ugv2:11311'
      - 'export ROS_HOSTNAME=nuc'
      
      - build:
        - cd ~/deploy_ws/src/
        - wifi-bluetooth:
          - cd state_estimation/wifi-bluetooth/catkin
          # NOTE: temporary. modules requires CUDA flag, not set in nuc, so ignore.
          - touch object_detection/modules/CATKIN_IGNORE
          - touch object_detection/realsense_fork/CATKIN_IGNORE
          - catkin build --force-cmake

      - clean:
        - cd ~/deploy_ws/src/
        - wifi-bluetooth:
          - cd state_estimation/wifi-bluetooth/catkin
          - catkin clean

      - launch:
        # start tmux sessions
        - start:
          - xsens:
            # start the tmux session
            - tmux new -s xsens -d
            # source
            - tmux send -t xsens 'source /home/nuc/workspace/xsens_driver/devel/setup.zsh' ENTER
            # run planning-pc launch
            - tmux send -t xsens 'roslaunch receive_xsens receive_xsens.launch' ENTER
            # message user
            - echo "Launch xsens in tmux session xsens"
          - wifi-bluetooth:
            # start the tmux session
            - tmux new -s wifi-bluetooth -d
            # source
            - tmux send -t wifi-bluetooth 'source /home/nuc/deploy_ws/devel/state_estimation/wifi_bluetooth/setup.zsh' ENTER
            # run wifi-bluetooth launch
            - tmux send -t wifi-bluetooth 'roslaunch bluetooth_detection mk_1_nuc.launch' ENTER
            # message user
            - echo "Launch wifi-bluetooth in tmux session wifi-bluetooth"
        # stop tmux sessions
        - stop:
          - xsens:
            - tmux kill-session -t xsens
          - wifi-bluetooth:
            - tmux kill-session -t wifi-bluetooth