##################################################################################################
- basestation:
##################################################################################################
  - 'export YELLOW="\033[1;33m"'
  - 'export BLUE="\033[1;36m"'
  - 'export RESET="\033[0m"'

  ################################################################################################
  - docker:
  ################################################################################################

    ####################################################
    # setup
    ####################################################
    - hostname
    - whoami
    - pwd
    
    ####################################################
    # path setup
    - 'export DEPLOY_WS=/home/$USER/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src/'
    - 'export DOCKER_CONFIG=field/robot/basestation'
    - 'export DOCKER_CONFIG_PATH=docker/env'
    
    ####################################################
    # print docker configuration information
    ####################################################
    - print:
      - echo -e "\n${BLUE} == Docker images to create == \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/robot/basestation.config \n" ;
      - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
      - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
      - while IFS= read line;
        do 
          echo -e ${BLUE} "\t$line";
        done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

    ####################################################
    # objdet docker image
    ####################################################
    - state_est:
      
      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - image:
        - 'export BUILD_ARGS="--force" '
        - osrf:
          - echo $LANG
          - ./build.bash --env local/osrf/ros $BUILD_ARGS
          - ./build.bash --env local/osrf/osrf $BUILD_ARGS
        - subt:
          - ./build.bash --env local/subt/ros $BUILD_ARGS
          - ./build.bash --env field/basestation/state_est $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" " '
        - ./run.bash --env field/basestation/state_est $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/basestation/state_est $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/basestation/state_est $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - delete:
        - 'export DELETE_ARGS="--containers" '
        - ./clean.bash --env field/basestation/state_est $DELETE_ARGS
        - ./clean.bash --env local/subt/ros $DELETE_ARGS
        - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
        - ./clean.bash --env local/osrf/ros $DELETE_ARGS
  
    ####################################################
    # misc.
    ####################################################
    - dangling:
      - docker rmi -f $(docker images -f "dangling=true" -q)
    
  ################################################################################################
  - state_est:
  ################################################################################################
    # only docker container on basestation, no ssh
    - +docker:subt
    
    - hostname
    - whoami
    - pwd
    - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src'
    - cd $DEPLOY_SRC

    ####################################################
    # setup
    # -- assumes the extended ws are already built
    # -- add only those repos that need rosdep
    ####################################################
    - setup:
      - xsens:
        - cd $DEPLOY_SRC/state_estimation/xsens/catkin/xsens_cpp_driver/receive_xsens/config/mt_sdk
        - sudo ./mt_sdk_4.8.sh
      

    ####################################################
    # build workspaces
    ####################################################
    - build:
      - cd $DEPLOY_SRC/state_estimation/

      # build the hardware workspace
      - thirdparty:
        - cd thirdparty/catkin
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin build --force-cmake

      # build planning workspace
      - loam:
        - cd loam/catkin
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin build --force-cmake
      
      # build planning workspace
      - repo:
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin build --force-cmake

      - xsens:
        - cd xsens/catkin
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin build --force-cmake

      # build launch workspace
      - launch:
        - cd $DEPLOY_SRC/launch/
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin profile set state_est
        - catkin clean -b --yes
        - catkin build --force-cmake

    ####################################################
    # clean workspaces
    ####################################################
    - clean:
      - state_est:
        - launch:
          - cd $DEPLOY_SRC/launch/
          - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
              rm .catkin_tools/profiles/profiles.yaml;
            fi
          - catkin profile set state_est
          - catkin clean -y
        - cd $DEPLOY_SRC/state_estimation/
        - xsens:
          - cd xsens/catkin
          - catkin clean -y
        - repo:
          - catkin clean -y
        - loam:
          - cd loam/catkin
          - catkin clean -y
        - thirdparty:
          - cd thirdparty/catkin
          - catkin clean -y

    ####################################################
    # remove workspaces
    ####################################################
    - rm:
      - state_est:
        - cd $DEPLOY_SRC/state_estimation/
        - repo:
          - find . -maxdepth 1 \! \( -name thirdparty -o -name loam -o -name .catkin_tools \) -exec rm -rf '{}' \;
        - thirdparty:
          - cd thirdparty/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - loam:
          - cd loam/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - xsens:
          - cd xsens/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;

    ####################################################
    # launch workspaces
    ####################################################
    - launch:
      ### == user can modify ==
      
      # launch configuration variables
      - 'export host=$(hostname)'
      - 'export MCAST_GROUP=224.0.0.251'
      - 'export robot=robots/basestation'
      - 'export USER=explorer'
      - 'export ROS_MASTER_URI=http://system76-pc:11311'
      # - 'export ROS_HOSTNAME=system76-pc'
      # - 'export DISPLAY=:0.0'
      
      ### == user can modify done. ==
      
      # create the bag folder
      - mkdir -p $DEPLOY_SRC/launch/ugv_setup/logging/base_station/bags/

      # get launch configuration data
      - export CONFIG_PATH="$DEPLOY_SRC/launch/robot_launch_scripting/config/"
      # parse config file for roslaunch params
      - get_config_data() {
          CONFIG_FILE=$CONFIG_PATH/${1}.config;
          while IFS='' read -r line || [[ -n "$line" ]]; do
            if [ ! "${line:0:1}" == "#" ]; then
              config_data="$config_data $line ";
            fi
          done < "$CONFIG_FILE";
          echo ${config_data};
        }
      - export -f get_config_data

      - start:
        - roscore:
          # start the tmux session
          - tmux new -s launch_roscore -d
          # export screen settings
          - tmux send -t launch_roscore 'stty columns 204' ENTER
          - tmux send -t launch_roscore 'stty lines 55' ENTER
          # source
          - tmux send -t launch_roscore 'source $DEPLOY_WS/devel/basestation/launch/setup.bash' ENTER
          # run autonomy launch
          - tmux send -t launch_roscore 'roscore' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_roscore"      
        - state_est:
          # parse the launch configuration params
          - export config=robots/basestation/state_est
          - export config_data=$(get_config_data "$config")

          # start the tmux session
          - tmux new -s launch_state_est -d
          # export screen settings
          # - tmux send -t launch_state_est 'stty columns 204' ENTER
          # - tmux send -t launch_state_est 'stty lines 55' ENTER
          # source
          - tmux send -t launch_state_est 'source $DEPLOY_WS/devel/basestation/launch/setup.bash' ENTER

          # manually set the tmux env vars...for now.
          - tmux send -t launch_state_est 'unset config_data' ENTER
          - tmux send -t launch_state_est 'export config=robots/basestation/state_est' ENTER
          - tmux send -t launch_state_est 'export config_data=$(get_config_data "$config")' ENTER
          
          # run autonomy launch
          - tmux send -t launch_state_est 'mon launch robot_launch_scripting subt.launch robot:=$robot $config_data' ENTER
          # - tmux send -t launch_state_est 'roslaunch basestation_launch basestation_launch.launch' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_state_est"
        - shell:
          - pwd
          - tmux new -s ros_shell -d
          # export screen settings
          - tmux send -t ros_shell 'stty columns 204' ENTER
          - tmux send -t ros_shell 'stty lines 55' ENTER
          # source
          - tmux send -t ros_shell 'source $DEPLOY_WS/devel/basestation/launch/setup.bash' ENTER
        - rosbag:
          # start record hardware
          - tmux new -s launch_rosbag -d
          # source
          - tmux send -t launch_rosbag 'source $DEPLOY_WS/devel/basestation/launch/setup.bash' ENTER
          # manually set the tmux env vars...for now.
          - tmux send -t launch_rosbag 'unset config_data' ENTER
          - tmux send -t launch_rosbag 'export config=robots/basestation/rosbag' ENTER
          - tmux send -t launch_rosbag 'export config_data=$(get_config_data "$config")' ENTER
          # launch rosbag
          - tmux send -t launch_rosbag 'eval $config_data' ENTER
        - launch_relay_ugv1_agg:
          # start record hardware
          - tmux new -s launch_relay_ugv1_agg -d
          # source
          - tmux send -t launch_relay_ugv1_agg 'source $DEPLOY_WS/devel/basestation/launch/setup.bash' ENTER
          # launch rosbag
          - tmux send -t launch_relay_ugv1_agg 'rosrun topic_tools relay /cm_rel/ugv1/bs/diagnostics_agg /diagnostics_agg' ENTER
        - launch_relay_ugv2_agg:
          # start record hardware
          - tmux new -s launch_relay_ugv2_agg -d
          # source
          - tmux send -t launch_relay_ugv2_agg 'source $DEPLOY_WS/devel/basestation/launch/setup.bash' ENTER
          # launch rosbag
          - tmux send -t launch_relay_ugv2_agg 'rosrun topic_tools relay /cm_rel/ugv2/bs/diagnostics_agg /diagnostics_agg' ENTER

      # stop tmux sessions    
      - stop:
        # remove all the tmux sessions
        - rosbag:
          - stop:
            # start stop record
            - tmux new -s launch_rosbag_stop -d
            - tmux send -t launch_rosbag_stop 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER  
            # stop record node
            - tmux send -t launch_rosbag_stop 'rosnode kill /rosbag_recording_nuc' ENTER
          - sessions:
            # stop the sessions
            # - until rostopic list ; do sleep 1; done
            - tmux kill-session -t launch_rosbag_stop
            - tmux kill-session -t launch_rosbag
        # remove all the tmux sessions
        - roscore:
          - tmux kill-session -t launch_roscore
        - state_est:
          - tmux kill-session -t launch_state_est
        - shell:
          - tmux kill-session -t ros_shell
        - launch_relay_ugv1_agg:
          - tmux kill-session -t launch_relay_ugv1_agg
        - launch_relay_ugv2_agg:
          - tmux kill-session -t launch_relay_ugv2_agg

      - rosclean:
        # stop all ros nodes
        - source $DEPLOY_WS/devel/planning/launch/setup.bash
        - ps aux | grep ros
        - rosnode kill -a
        - pkill -f ros
        - rosnode list
        - ps aux | grep ros