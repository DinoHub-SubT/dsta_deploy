##################################################################################################
- basestation:
##################################################################################################
  - 'export YELLOW="\033[1;33m"'
  - 'export BLUE="\033[1;36m"'
  - 'export RESET="\033[0m"'

  ################################################################################################
  - docker:
  ################################################################################################

    ####################################################
    # setup
    ####################################################
    - hostname
    - whoami
    - pwd
    
    ####################################################
    # path setup
    - 'export DEPLOY_WS=/home/$USER/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src/'
    - 'export DOCKER_CONFIG=field/robot/basestation'
    - 'export DOCKER_CONFIG_PATH=docker/env'
    
    ####################################################
    # print docker configuration information
    ####################################################
    - print:
      - echo -e "\n${BLUE} == Docker images to create == \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/robot/basestation.config \n" ;
      - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
      - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
      - while IFS= read line;
        do 
          echo -e ${BLUE} "\t$line";
        done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

    ####################################################
    # objdet docker image
    ####################################################
    - planning:
      
      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - image:
        - 'export BUILD_ARGS="--force" '
        - osrf:
          - echo $LANG
          - ./build.bash --env local/osrf/ros $BUILD_ARGS
          - ./build.bash --env local/osrf/osrf $BUILD_ARGS
        - subt:
          - ./build.bash --env local/subt/ros $BUILD_ARGS
          - ./build.bash --env field/basestation/planning $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" " '
        - ./run.bash --env field/basestation/planning $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/basestation/planning $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/basestation/planning $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - delete:
        - 'export DELETE_ARGS="--containers" '
        - ./clean.bash --env field/basestation/planning $DELETE_ARGS
        - ./clean.bash --env local/subt/ros $DELETE_ARGS
        - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
        - ./clean.bash --env local/osrf/ros $DELETE_ARGS
  
    ####################################################
    # misc.
    ####################################################
    - dangling:
      - docker rmi -f $(docker images -f "dangling=true" -q)
    
  ################################################################################################
  - planning:
  ################################################################################################
    # only docker container on basestation, no ssh
    - +docker:subt
    
    - hostname
    - whoami
    - pwd
    - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src'
    - cd $DEPLOY_SRC

    ####################################################
    # build workspaces
    ####################################################
    - build:
      - planning:
        - cd planning/

        # build the hardware workspace
        - thirdparty:
          - cd thirdparty/catkin
          - catkin build --force-cmake

        # build planning workspace
        - repo:
          - catkin build --force-cmake

        # build the hardware workspace
        - hardware:
          - cd hardware/catkin
          - catkin build --force-cmake

        # build launch workspace
        - launch:
          - cd $DEPLOY_SRC/launch/
          - rm .catkin_tools/profiles/profiles.yaml
          - catkin profile set planning
          - catkin clean -b --yes
          - catkin build --force-cmake

    ####################################################
    # clean workspaces
    ####################################################
    - clean:
      - planning:
        - launch:
          - cd $DEPLOY_SRC/launch/
          - catkin clean -y
        - cd $DEPLOY_SRC/planning/
        - hardware:
          - cd hardware/catkin
          - catkin clean -y
        - repo:
          - catkin clean -y
        - thirdparty:
          - cd thirdparty/catkin
          - catkin clean -y

    ####################################################
    # remove workspaces
    ####################################################
    - rm:
      - planning:
        - cd planning/
        - repo:
          - find . -maxdepth 1 \! \( -name thirdparty -o -name hardware -o -name .catkin_tools \) -exec rm -rf '{}' \;
        - hardware:
          - cd hardware/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - thirdparty:
          - cd thirdparty/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - xsens:
          - cd xsens/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;

    ####################################################
    # launch workspaces
    ####################################################
    - launch:
      ### == user can modify ==
      
      # launch configuration variables
      - 'export host=$(hostname)'
      - 'export MCAST_GROUP=224.0.0.251'
      - 'export robot=robots/basestation'
      - 'export USER=explorer'
      - 'export ROS_MASTER_URI=http://system76-pc:11311'
      # - 'export ROS_HOSTNAME=system76-pc'
      # - 'export DISPLAY=:0.0'
      
      ### == user can modify done. ==

      # create the bag folder
      - mkdir -p $DEPLOY_SRC/launch/ugv_setup/logging/planning-pc/bags/

      # get launch configuration data
      - export CONFIG_PATH="$DEPLOY_SRC/launch/robot_launch_scripting/config/"
      # parse config file for roslaunch params
      - get_config_data() {
          CONFIG_FILE=$CONFIG_PATH/${1}.config;
          while IFS='' read -r line || [[ -n "$line" ]]; do
            if [ ! "${line:0:1}" == "#" ]; then
              config_data="$config_data $line ";
            fi
          done < "$CONFIG_FILE";
          echo ${config_data};
        }
      - export -f get_config_data

      - start:
        - roscore:
          # enable roscore
          - 'export ROS_MASTER=true'
          # start the tmux sessions
          - tmux new -s ${host}_roscore -d
          # source
          - tmux send -t ${host}_roscore 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
          # run roscore
          - tmux send -t ${host}_roscore 'rosrun robot_launch_scripting launch_roscore.sh' ENTER
        
        - planning:
          # parse the launch configuration params
          - export config=robots/r1/planning-pc/planning
          - export config_data=$(get_config_data "$config")

          # start the tmux session
          - tmux new -s launch_planning -d
          # source
          - tmux send -t launch_planning 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER

          # manually set the tmux env vars...for now.
          - tmux send -t launch_planning 'unset config_data' ENTER
          - tmux send -t launch_planning 'export config=robots/r1/planning-pc/planning' ENTER
          - tmux send -t launch_planning 'export config_data=$(get_config_data "$config")' ENTER

          # run autonomy launch
          - tmux send -t launch_planning 'mon launch robot_launch_scripting subt.launch $config_data' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_planning"
        
        - hardware:
          # parse the launch configuration params
          - export config=robots/r1/planning-pc/hardware
          - export config_data=$(get_config_data "$config")

          # start the tmux session
          - tmux new -s launch_hardware -d
          # source
          - tmux send -t launch_hardware 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER

          # manually set the tmux env vars...for now.
          - tmux send -t launch_hardware 'unset config_data' ENTER
          - tmux send -t launch_hardware 'export config=robots/r1/planning-pc/hardware' ENTER
          - tmux send -t launch_hardware 'export config_data=$(get_config_data "$config")' ENTER

          # run hardware launch
          - tmux send -t launch_hardware 'mon launch robot_launch_scripting subt.launch $config_data' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_hardware"
        
        - shell:
          # empty shell prompt
          - pwd
          - tmux new -s ros_shell -d
          - tmux send -t ros_shell 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER

        - rosbag:
          # start record hardware
          - tmux new -s launch_rosbag -d
          # source
          - tmux send -t launch_rosbag 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
          # manually set the tmux env vars...for now.
          - tmux send -t launch_rosbag 'unset config_data' ENTER
          - tmux send -t launch_rosbag 'export config=robots/r1/planning-pc/rosbag' ENTER
          - tmux send -t launch_rosbag 'export config_data=$(get_config_data "$config")' ENTER
          # launch rosbag
          - tmux send -t launch_rosbag 'eval $config_data' ENTER
        
      - stop:
        # remove all the tmux sessions
        - rosbag:
            - stop:
              # start stop record
              - tmux new -s launch_rosbag_stop -d
              - tmux send -t launch_rosbag_stop 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER  
              # stop record node
              - tmux send -t launch_rosbag_stop 'rosnode kill /rosbag_recording_planning_pc' ENTER
            - sessions:
              # stop the sessions
              # - until rostopic list ; do sleep 1; done
              - tmux kill-session -t launch_rosbag_stop
              - tmux kill-session -t launch_rosbag
        - roscore:
          - tmux kill-session -t ${host}_roscore
        - planning:
          - tmux kill-session -t launch_planning
        - hardware:
          - tmux kill-session -t launch_hardware
        - shell:
          - tmux kill-session -t ros_shell
        
      - rosclean:
        # stop all ros nodes
        - source $DEPLOY_WS/devel/planning/repo/setup.bash
        - ps aux | grep ros
        - rosnode kill -a
        - pkill -f ros
        - rosnode list
        - ps aux | grep ros
