################################################################################################
- basestation:
################################################################################################
  - 'export YELLOW="\033[1;33m"'
  - 'export BLUE="\033[1;36m"'
  - 'export RESET="\033[0m"'

  - hostname
  - whoami
  - pwd
  - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
  - 'export DEPLOY_SRC=$DEPLOY_WS/src'
  - cd $DEPLOY_SRC

  ################################################################################################
  - delete-bags:
  ################################################################################################
    - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
    - rm -rf $DEPLOY_SRC/launch/ugv_setup/logging/base_station/bags/*

  ################################################################################################
  - delete-artifacts:
  ################################################################################################
    - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
    - rm -rf $DEPLOY_SRC/basestation/basestation_gui_python/data/artifacts/received/*.json
    - rm -rf $DEPLOY_SRC/basestation/basestation_gui_python/data/artifacts/submitted/*.json

  ####################################################
  # clone workspaces
  ####################################################
  - clone:

    # download the subt_robot_examples_latest
    # NOTE: only do this on ONCE. requires internet access.
    # - download:
    #   - if [ -f subt_robot_examples_latest.tgz ]; then
    #       rm subt_robot_examples_latest.tgz;
    #     fi
    #   - wget --no-check-certificate https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz

    # update any submodule
    - submodule:
      - perception:
        - git submodule update --init --recursive $DEPLOY_SRC/perception
      - launch:
        - git submodule update $DEPLOY_SRC/launch
      - docker:
        - git submodule update $DEPLOY_SRC/docker
      - ci:
        - git submodule update $DEPLOY_SRC/ci

    # setup the rosinstalls
    - rosinstall:
      # basestation rosinstall
      - basestation:
        - cd $DEPLOY_SRC/basestation
        - thirdparty:
          - cd thirdparty/catkin
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s $DEPLOY_SRC/rosinstall/basestation/thirdparty.rosinstall .rosinstall
        - repo:
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s $DEPLOY_SRC/rosinstall/basestation/basestation.rosinstall .rosinstall
      # planning rosinstall
      - planning:
        - cd $DEPLOY_SRC/planning
        - thirdparty:
          - cd thirdparty/catkin
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s $DEPLOY_SRC/rosinstall/planning/thirdparty.rosinstall .rosinstall
        - repo:
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s $DEPLOY_SRC/rosinstall/planning/planning.rosinstall .rosinstall
        - hardware:
          - cd hardware/catkin
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s $DEPLOY_SRC/rosinstall/planning/hardware.rosinstall .rosinstall
      # state estimation rosinstall
      - state_est:
        - cd $DEPLOY_SRC/state_estimation
        - repo:
          - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
          - ln -s $DEPLOY_SRC/rosinstall/state_est/state_est.rosinstall .rosinstall
        - thirdparty:
          - cd thirdparty/catkin
          - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
          - ln -s $DEPLOY_SRC/rosinstall/state_est/thirdparty.rosinstall .rosinstall
        - loam:
          - cd loam/catkin
          - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
          - ln -s $DEPLOY_SRC/rosinstall/state_est/loam.rosinstall .rosinstall
        - xsens:
          - cd xsens/catkin
          - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
          - ln -s $DEPLOY_SRC/rosinstall/state_est/xsens.rosinstall .rosinstall
      # perception rosinstall
      - perception:
        - cd $DEPLOY_SRC/perception
        - thirdparty:
          - cd thirdparty/catkin
          - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
          - ln -s $DEPLOY_SRC/rosinstall/perception/thirdparty.rosinstall .rosinstall
        - objdet_deps:
          - cd objdet_deps/catkin
          - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
          - ln -s $DEPLOY_SRC/rosinstall/perception/objdet_deps.rosinstall .rosinstall
        - recording:
          - cd recording/catkin
          - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
          - ln -s $DEPLOY_SRC/rosinstall/perception/recording.rosinstall .rosinstall

    # wstool update the workspaces
    - up:
      # basestation ws update
      - basestation:
        - cd $DEPLOY_SRC/basestation
        - thirdparty:
          - cd thirdparty/catkin
          - wstool info
          - wstool update
        - repo:
          - wstool info
          - wstool update
      # planning ws update
      - planning:
        - cd $DEPLOY_SRC/planning
        - thirdparty:
          - cd thirdparty/catkin
          - wstool info
          - wstool update
        - repo:
          - wstool info
          - wstool update
        - hardware:
          - cd hardware/catkin
          - wstool info
          - wstool update
      # state estimation ws update
      - state_est:
        - cd $DEPLOY_SRC/state_estimation
        - repo:
          - wstool info
          - wstool update
        - thirdparty:
          - cd thirdparty/catkin
          - wstool info
          - wstool update
        - loam:
          - cd loam/catkin
          - wstool info
          - wstool update
        - xsens:
          - cd xsens/catkin
          - wstool info
          - wstool update
      # perception ws update
      - perception:
        - cd $DEPLOY_SRC/perception
        # perception ws update
        - repo:
          - git submodule update --recursive
        - thirdparty:
          - cd thirdparty/catkin
          - wstool info
          - wstool update
        - objdet_deps:
          - cd objdet_deps/catkin
          - wstool info
          - wstool update
        - recording:
          - cd recording/catkin
          - wstool info
          - wstool update

  ####################################################
  # remove workspaces
  ####################################################
  - rm:
    # clean the basestation
    - basestation:
      - cd $DEPLOY_SRC/basestation/
      - basestation:
        - find . -maxdepth 1 \! \( -name thirdparty -o -name .catkin_tools \) -exec rm -rf '{}' \;
      - thirdparty:
        - cd thirdparty/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
    # clean the planning
    - planning:
      - cd $DEPLOY_SRC/planning/
      - repo:
        - find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools \) -exec rm -rf '{}' \;
      - hardware:
        - cd hardware/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
      - thirdparty:
        - cd thirdparty/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
    # clean the state_estimation
    - state_est:
      - cd $DEPLOY_SRC/state_estimation/
      - repo:
        - find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name loam -o -name .catkin_tools -o -name xsens \) -exec rm -rf '{}' \;
      - thirdparty:
        - cd thirdparty/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
      - loam:
        - cd loam/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
      - xsens:
        - cd xsens/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
    # clean the perception
    - perception:
      - cd $DEPLOY_SRC/perception/
      - recording:
        - cd recording/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools -o -name CATKIN_IGNORE \) -exec rm -rf '{}' \;
      - objdet_deps:
        - cd objdet_deps/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools -o -name CATKIN_IGNORE \) -exec rm -rf '{}' \;
      - thirdparty:
        - cd thirdparty/catkin
        - find . -maxdepth 1 \! \( -name .catkin_tools -o -name CATKIN_IGNORE \) -exec rm -rf '{}' \;
  
  ####################################################
  # git updater
  ####################################################
  - git:
    - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src'
    
    # git status check          
    - git_status() {
        for repo in $1; do
          pushd $repo  > /dev/null 2>&1;
          if [ -d .git ]; then
            echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
            echo -e "\n${YELLOW}\tgit hash -> \t $(git rev-parse --verify HEAD;) \n ${RESET}" ;
            git config --get remote.origin.url;
            git status;
            echo -e "\n\n";
          fi;
          popd  > /dev/null 2>&1;
        done;
      }
    - export -f git_status

    # git status check          
    - git_dirty() {
        for repo in $1; do
          pushd $repo  > /dev/null 2>&1;
          if [ -d .git ]; then
            if [[ $(git status -s) ]]; then
              echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
              git config --get remote.origin.url;
              git status;
              echo -e "\n\n";
            fi;
          fi;
          popd  > /dev/null 2>&1;
        done;
      }
    - export -f git_dirty

    # wstool update to git hash
    - git_updater() {
        for repo in $1; do
          echo "repo is $repo";
          pushd $repo  > /dev/null 2>&1;
          if [ -d .git ]; then
            echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
            export GIT_COMMIT_HASH=$(git rev-parse --verify HEAD);
            export ROSINSTALL_GIT_HASH=$(wstool info $(basename $repo) --yaml | grep -oP "version\K.*" | grep -oP " \K.*");
            wstool set $(basename $repo) -v $GIT_COMMIT_HASH -y;
            echo -e "\n\n";
          fi;
          popd  > /dev/null 2>&1;
        done;
      }
    - export -f git_updater

    ####################################################
    # git commands for planning workspace
    ####################################################
    - planning:
      - cd $DEPLOY_SRC/planning

      # git update to thirdparty ws
      - thirdparty:
        - status:
          - 'export git_fn=git_status'
        - update:
          - 'export git_fn=git_updater'
        - dirty:
          - 'export git_fn=git_dirty'
        # execute git fn            
        - cd thirdparty/catkin
        - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
        - $git_fn "$REPOS"

      # git update to repo ws
      - repo:
        - status:
          - 'export git_fn=git_status'
        - update:
          - 'export git_fn=git_updater'
        - dirty:
          - 'export git_fn=git_dirty'
        # execute git fn
        #- export REPOS=$(find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools -o -name .rosinstall \) )
        - export REPOS=$(find "/home/developer/deploy_ws/r2-nuc-src/planning/" -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools -o -name .rosinstall \) )
        - $git_fn "$REPOS"
      
    # update the planning repso
    - state_est:
      - cd $DEPLOY_SRC/state_estimation
      - thirdparty:
        - status:
          - 'export git_fn=git_status'
        - update:
          - 'export git_fn=git_updater'
        - dirty:
          - 'export git_fn=git_dirty'
        # execute git fn
        - cd thirdparty/catkin
        - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
        - $git_fn "$REPOS"
      - repo:
        - status:
          - 'export git_fn=git_status'
        - update:
          - 'export git_fn=git_updater'
        - dirty:
          - 'export git_fn=git_dirty'
        # execute git fn
        - export REPOS=$(find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name loam -o -name .catkin_tools -o -name .rosinstall \) )
        - $git_fn "$REPOS"

# current alias settings -- for now
# alias deployer="cd $HOME/deploy_ws/src && ./deployer"
# alias docker-join-basestation="
#  docker exec subt bash -c \"sed -i '/MCAST_GROUP/d' /home/developer/.bashrc  \";
#  docker exec subt bash -c \"sed -i '/ROS_MASTER_URI/d' /home/developer/.bashrc  \";
#  docker exec subt bash -c \"sed -i '/deploy_ws\/devel/d' /home/developer/.bashrc  \";
#  docker exec subt bash -c \"echo 'export MCAST_GROUP=224.0.0.251 ' >> ~/.bashrc \";
#  docker exec subt bash -c \"echo 'export ROS_MASTER_URI=http://system76-pc:11311 ' >> ~/.bashrc \";
#  docker exec subt bash -c \"echo 'source ~/deploy_ws/devel/basestation/repo/setup.bash' >> ~/.bashrc  \";
#  cd /home/explorer/deploy_ws/src/docker/scripts;
#  ./join.bash --name subt;"
# alias docker-join-perception="
#  docker exec subt-perception bash -c \"sed -i '/MCAST_GROUP/d' /home/developer/.bashrc  \";
#  docker exec subt-perception bash -c \"sed -i '/ROS_MASTER_URI/d' /home/developer/.bashrc  \";
#  docker exec subt-perception bash -c \"sed -i '/deploy_ws\/devel/d' /home/developer/.bashrc  \";
#  docker exec subt-perception bash -c \"echo 'export MCAST_GROUP=224.0.0.251 ' >> ~/.bashrc \";
#  docker exec subt-perception bash -c \"echo 'export ROS_MASTER_URI=http://system76-pc:11311 ' >> ~/.bashrc \";
#  docker exec subt-perception bash -c \"echo 'source ~/deploy_ws/devel/perception/objdet/setup.bash' >> ~/.bashrc  \";
#  cd /home/explorer/deploy_ws/src/docker/scripts;
#  ./join.bash --name subt-perception;"