##################################################################################################
- basestation:
##################################################################################################
  - 'export YELLOW="\033[1;33m"'
  - 'export BLUE="\033[1;36m"'
  - 'export RESET="\033[0m"'

  ################################################################################################
  - docker:
  ################################################################################################

    ####################################################
    # setup
    ####################################################
    - hostname
    - whoami
    - pwd
    
    ####################################################
    # path setup
    - 'export DEPLOY_WS=/home/$USER/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src/'
    - 'export DOCKER_CONFIG=field/robot/basestation'
    - 'export DOCKER_CONFIG_PATH=docker/env'
    
    ####################################################
    # print docker configuration information
    ####################################################
    - print:
      - echo -e "\n${BLUE} == Docker images to create == \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/robot/basestation.config \n" ;
      - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
      - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
      - while IFS= read line;
        do 
          echo -e ${BLUE} "\t$line";
        done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

    ####################################################
    # build docker images
    ####################################################
    - cd $DEPLOY_SRC/docker/scripts
    - image:
      - 'export BUILD_ARGS="--force" '
      - osrf:
        - echo $LANG
        - ./build.bash --env local/osrf/ros $BUILD_ARGS
        - ./build.bash --env local/osrf/osrf $BUILD_ARGS
      - subt:
        - ./build.bash --env local/subt/ros $BUILD_ARGS
        - ./build.bash --env field/basestation $BUILD_ARGS

    ####################################################
    # start docker images
    ####################################################
    - start:
      - 'export START_ARGS=" " '
      - ./run.bash --env field/basestation $START_ARGS

    ####################################################
    # stop docker images
    ####################################################
    - stop:
      - 'export STOP_ARGS="--stop --containers " '
      - ./clean.bash --env field/basestation $STOP_ARGS
    
    - remove:
      - 'export STOP_ARGS="--remove --containers " '
      - ./clean.bash --env field/basestation $STOP_ARGS
    
    ####################################################
    # delete docker images & corresponding containers
    ####################################################
    - clean:
      - 'export DELETE_ARGS="--containers" '
      - ./clean.bash --env field/basestation $DELETE_ARGS
      - ./clean.bash --env local/subt/ros $DELETE_ARGS
      - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
      - ./clean.bash --env local/osrf/ros $DELETE_ARGS
    
    ####################################################
    # misc.
    ####################################################
    - dangling:
      - docker rmi -f $(docker images -f "dangling=true" -q)
    
  ################################################################################################
  - deploy:
  ################################################################################################
    # only docker container on basestation, no ssh
    - +docker:subt
    
    - hostname
    - whoami
    - pwd
    - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src'
    - cd $DEPLOY_SRC

    ####################################################
    # clone workspaces
    ####################################################
    - clone:

      # download the subt_robot_examples_latest
      # NOTE: only do this on ONCE. requires internet access.
      # - download:
      #   - if [ -f subt_robot_examples_latest.tgz ]; then
      #       rm subt_robot_examples_latest.tgz;
      #     fi
      #   - wget --no-check-certificate https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz

      # update any submodule
      - submodule:
        - perception:
          - git submodule update --init --recursive $DEPLOY_SRC/perception
        - launch:
          - git submodule update $DEPLOY_SRC/launch
        - docker:
          - git submodule update $DEPLOY_SRC/docker
        # - field_support:
        #   - git submodule update $DEPLOY_SRC/field_support
        - ci:
          - git submodule update $DEPLOY_SRC/ci

      # clone & update the planning workspace
      - cd planning/
      
      # setup the rosinstalls
      - rosinstall:
        - planning:
          - thirdparty:
            - cd thirdparty/catkin
            - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
            - ln -s $DEPLOY_SRC/rosinstall/planning/thirdparty.rosinstall .rosinstall
          - repo:
            - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
            - ln -s $DEPLOY_SRC/rosinstall/planning/planning.rosinstall .rosinstall
          - hardware:
            - cd hardware/catkin
            - if [ -f .rosinstall ]; then
                rm .rosinstall;
              fi
            - ln -s $DEPLOY_SRC/rosinstall/planning/hardware.rosinstall .rosinstall
        - state_est:
          - cd $DEPLOY_SRC/state_estimation
          - repo:
            - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
            - ln -s $DEPLOY_SRC/rosinstall/state_est/state_est.rosinstall .rosinstall
          - thirdparty:
            - cd thirdparty/catkin
            - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
            - ln -s $DEPLOY_SRC/rosinstall/state_est/thirdparty.rosinstall .rosinstall
          - loam:
            - cd loam/catkin
            - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
            - ln -s $DEPLOY_SRC/rosinstall/state_est/loam.rosinstall .rosinstall
          - xsens:
            - cd xsens/catkin
            - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
            - ln -s $DEPLOY_SRC/rosinstall/state_est/xsens.rosinstall .rosinstall
        - perception:
          - cd $DEPLOY_SRC/perception
          - thirdparty:
            - cd thirdparty/catkin
            - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
            - ln -s $DEPLOY_SRC/rosinstall/perception/thirdparty.rosinstall .rosinstall
          - recording:
            - cd recording/catkin
            - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
            - ln -s $DEPLOY_SRC/rosinstall/perception/recording.rosinstall .rosinstall

      # wstool update the workspaces
      - up:
        - perception:
          - cd $DEPLOY_SRC/perception
          - git submodule update --recursive
        # planning ws update
        - planning:
          - thirdparty:
            - cd thirdparty/catkin
            - wstool info
            - wstool update
          - repo:
            - wstool info
            - wstool update
          - hardware:
            - cd hardware/catkin
            - wstool info
            - wstool update
        # state estimation ws update
        - state_est:
          - cd $DEPLOY_SRC/state_estimation
          - repo:
            - wstool info
            - wstool update
          - thirdparty:
            - cd thirdparty/catkin
            - wstool info
            - wstool update
          - loam:
            - cd loam/catkin
            - wstool info
            - wstool update
          - xsens:
            - cd xsens/catkin
            - wstool info
            - wstool update
        # perception ws update
        - perception:
          - cd $DEPLOY_SRC/perception
          - thirdparty:
            - cd thirdparty/catkin
            - wstool info
            - wstool update
          - recording:
            - cd recording/catkin
            - wstool info
            - wstool update

    ####################################################
    # rosdep
    # -- assumes the extended ws are already built
    # -- add only those repos that need rosdep
    ####################################################
    - rosdep:
      # install any thirdparty deps
      - cd planning
      - planning:
        - ./Planning_workspace/install_dependencies.sh
      - hardware:
        - source $DEPLOY_WS/devel/planning/hardware/setup.bash
        - cd $DEPLOY_SRC/state_estimation/thirdparty/catkin
        - rosdep install --from-paths . --ignore-src --rosdistro melodic -y
      - xsens:
        - cd $DEPLOY_SRC/state_estimation/xsens_cpp_driver/receive_xsens/config/mt_sdk
        - sudo ./mt_sdk_4.8.sh
      
    ####################################################
    # build workspaces
    ####################################################
    - build:
      - planning:
        - cd planning/

        # build the hardware workspace
        - thirdparty:
          - cd thirdparty/catkin
          - catkin build --force-cmake

        # build planning workspace
        - repo:
          - catkin build --force-cmake

        # build launch workspace
        - launch:
          - cd $DEPLOY_SRC/launch/
          - catkin profile set planning-no-hardware
          - catkin clean -b --yes
          - catkin build --force-cmake

    ####################################################
    # clean workspaces
    ####################################################
    - clean:
      - launch:
        - cd $DEPLOY_SRC/launch/
        - catkin clean -y
      - planning:
        - repo:
          - catkin clean -y
        - thirdparty:
          - cd thirdparty/catkin
          - catkin clean -y

    ####################################################
    # remove workspaces
    ####################################################
    - rm:
      - planning:
        - cd planning/
        - repo:
          - find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools \) -exec rm -rf '{}' \;
        - hardware:
          - cd hardware/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - thirdparty:
          - cd thirdparty/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
      - state_est:
        - cd $DEPLOY_SRC/state_estimation/
        - repo:
          - find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name loam -o -name .catkin_tools \) -exec rm -rf '{}' \;
        - thirdparty:
          - cd thirdparty/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - loam:
          - cd loam/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
      - perception:
        - cd perception/
        - recording:
          - cd recording/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools -o -name CATKIN_IGNORE \) -exec rm -rf '{}' \;
        - thirdparty:
          - cd thirdparty/catkin
          - find . -maxdepth 1 \! \( -name .catkin_tools -o -name CATKIN_IGNORE \) -exec rm -rf '{}' \;

    ####################################################
    # launch workspaces
    ####################################################
    - launch:
      ### == user can modify ==
      
      # launch configuration variables
      - 'export host=$(hostname)'
      - 'export MCAST_GROUP=224.0.0.251'
      - 'export robot=robots/planning-pc'
      - 'export USER=mtatum'
      - 'export ROS_MASTER_URI=http://ugv2:11311'
      - 'export ROS_HOSTNAME=basestation-pc'
      - 'export DISPLAY=:0.0'
      
      ### == user can modify done. ==

      - start:
        - gui:
          # start the tmux session
          - tmux new -s launch_gui -d
          # source
          - tmux send -t launch_gui 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
          # run autonomy launch
          - tmux send -t launch_gui 'mon launch robot_launch_scripting subt.launch robot:=$robot' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_gui"
        - shell:
          - pwd
          - tmux new -s ros_shell -d
          - tmux send -t ros_shell 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
        
        - rosbag:
            # default logging path
            - export logging_path=$DEPLOY_SRC/launch/ugv_setup/logging/
            - recorder:  
              # start the recorder tmux session
              - tmux new -s launch_rosbag_recorder -d
              # source
              - tmux send -t launch_rosbag_recorder 'source $DEPLOY_WS/devel/planning/hardware/setup.bash' ENTER
              # launch recorder
              - tmux send -t launch_rosbag_recorder 'roslaunch bag_recorder deploy.launch logging_path:=$logging_path computer:=base_station' ENTER
            - bag:
              # start record hardware
              - tmux new -s launch_rosbag -d
              # source
              - tmux send -t launch_rosbag 'source $DEPLOY_WS/devel/planning/hardware/setup.bash' ENTER
              # launch rosbag
              - tmux send -t launch_rosbag 'roslaunch bag_recorder deploy_start.launch 
                  node_name:=base_station config:=all bag:="test"' ENTER
            # message user
            - echo "Launch deployed in tmux session launch_rosbag"

      # stop tmux sessions    
      - stop:
        # remove all the tmux sessions
        - gui:
          - tmux kill-session -t launch_gui
        - shell:
            - tmux kill-session -t ros_shell

      - rosclean:
        # stop all ros nodes
        - source $DEPLOY_WS/devel/planning/repo/setup.bash
        - ps aux | grep ros
        - rosnode kill -a
        - pkill -f ros
        - rosnode list
        - ps aux | grep ros
    
    ####################################################
    # git updater
    ####################################################
    - git:
      - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
      - 'export DEPLOY_SRC=$DEPLOY_WS/src'
      
      # git status check          
      - git_status() {
          for repo in $1; do
            pushd $repo  > /dev/null 2>&1;
            if [ -d .git ]; then
              echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
              echo -e "\n${YELLOW}\tgit hash -> \t $(git rev-parse --verify HEAD;) \n ${RESET}" ;
              git config --get remote.origin.url;
              git status;
              echo -e "\n\n";
            fi;
            popd  > /dev/null 2>&1;
          done;
        }
      - export -f git_status

      # git status check          
      - git_dirty() {
          for repo in $1; do
            pushd $repo  > /dev/null 2>&1;
            if [ -d .git ]; then
              if [[ $(git status -s) ]]; then
                echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
                git config --get remote.origin.url;
                git status;
                echo -e "\n\n";
              fi;
            fi;
            popd  > /dev/null 2>&1;
          done;
        }
      - export -f git_dirty

      # wstool update to git hash
      - git_updater() {
          for repo in $1; do
            echo "repo is $repo";
            pushd $repo  > /dev/null 2>&1;
            if [ -d .git ]; then
              echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
              export GIT_COMMIT_HASH=$(git rev-parse --verify HEAD);
              export ROSINSTALL_GIT_HASH=$(wstool info $(basename $repo) --yaml | grep -oP "version\K.*" | grep -oP " \K.*");
              wstool set $(basename $repo) -v $GIT_COMMIT_HASH -y;
              echo -e "\n\n";
            fi;
            popd  > /dev/null 2>&1;
          done;
        }
      - export -f git_updater

      ####################################################
      # git commands for planning workspace
      ####################################################
      - planning:
        - cd $DEPLOY_SRC/planning

        # git update to thirdparty ws
        - thirdparty:
          - status:
            - 'export git_fn=git_status'
          - update:
            - 'export git_fn=git_updater'
          - dirty:
            - 'export git_fn=git_dirty'
          # execute git fn            
          - cd thirdparty/catkin
          - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
          - $git_fn "$REPOS"

        # git update to repo ws
        - repo:
          - status:
            - 'export git_fn=git_status'
          - update:
            - 'export git_fn=git_updater'
          - dirty:
            - 'export git_fn=git_dirty'
          # execute git fn
          #- export REPOS=$(find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools -o -name .rosinstall \) )
          - export REPOS=$(find "/home/developer/deploy_ws/r2-nuc-src/planning/" -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools -o -name .rosinstall \) )
          - $git_fn "$REPOS"
        
      # update the planning repso
      - state_est:
        - cd $DEPLOY_SRC/state_estimation
        - thirdparty:
          - status:
            - 'export git_fn=git_status'
          - update:
            - 'export git_fn=git_updater'
          - dirty:
            - 'export git_fn=git_dirty'
          # execute git fn
          - cd thirdparty/catkin
          - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
          - $git_fn "$REPOS"
        - repo:
          - status:
            - 'export git_fn=git_status'
          - update:
            - 'export git_fn=git_updater'
          - dirty:
            - 'export git_fn=git_dirty'
          # execute git fn
          - export REPOS=$(find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name loam -o -name .catkin_tools -o -name .rosinstall \) )
          - $git_fn "$REPOS"

