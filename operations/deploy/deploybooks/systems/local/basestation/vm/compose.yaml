# //////////////////////////////////////////////////////////////////////////
- docker:
# //////////////////////////////////////////////////////////////////////////

  # ////////////////////////////////////////////////////////////////////////////
  - image:
  # ////////////////////////////////////////////////////////////////////////////
    - docker-compose-wrapper $scenario build --force-rm ros-$deploy_system_type-image
    - docker-compose-wrapper $scenario build --force-rm basestation-$deploy_system_type-image
    # ignore any error messages (in case there are no dangling images)
    - docker rmi -f $(docker images -f "dangling=true" -q) 2&1> /dev/null

  # ////////////////////////////////////////////////////////////////////////////
  - container:
  # ////////////////////////////////////////////////////////////////////////////

    # starting docker containers
    - shell:
      # always create the default network if does not exist
      - echo "Docker network subnet is $LOCAL_NETWORK_SUBNET"
      - echo "Docker network ip range is $LOCAL_NETWORK_IP_RANGE"
      - docker network create -d bridge robots --subnet=$LOCAL_NETWORK_SUBNET --ip-range=$LOCAL_NETWORK_IP_RANGE || true

      # - docker-compose-wrapper $scenario -p basestation-shell up --force-recreate -d basestation-shell
      - docker-compose-wrapper $scenario -p basestation-$deploy_system_type-shell up --force-recreate -d basestation-$deploy_system_type-shell

    # stopping containers
    - stop:
      - docker stop $(docker ps -a -q)
    # removing containers
    - rm:
      - docker rm -f $(docker ps -a -q)
