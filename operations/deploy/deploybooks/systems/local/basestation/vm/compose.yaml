# //////////////////////////////////////////////////////////////////////////
- docker:
# //////////////////////////////////////////////////////////////////////////

  # == creating docker images ==
  - image:
    - docker-compose-wrapper $scenario build --force-rm ros-$deploy_system_type-image
    - docker-compose-wrapper $scenario build --force-rm basestation-$deploy_system_type-image
    # ignore any error messages (in case there are no dangling images)
    - docker rmi -f $(docker images -f "dangling=true" -q) 2&1> /dev/null

  # == creating docker containers ==
  - container:
    # starting docker containers
    - shell:
      # - docker-compose-wrapper $scenario -p basestation-shell up --force-recreate -d basestation-shell
      - docker-compose-wrapper $scenario -p basestation-$deploy_system_type-shell up --force-recreate -d basestation-$deploy_system_type-shell
    # stopping containers
    - stop:
      - all:
        - docker stop $(docker ps -a -q)
    # removing containers
    - rm:
      - all:
        - docker rm $(docker ps -a -q)

  # == creating docker run containers ==
  - container.run:
    - docker-compose-wrapper $scenario -p ${deploybook_run}-start up --force-recreate -d basestation-commander-run
  # any compose command -- user can add '-e arg="launch build-gui"' to specify command
  - container.exec:
    - docker-compose-wrapper $scenario -p ${deploybook_run}-run up --force-recreate -d basestation-commander-run-any
