---
  # ////////////////////////////////////////////////////////////////////////
  # Install Git Deploy Repository Setup
  # ////////////////////////////////////////////////////////////////////////
  - name: Install Git Deploy Repository Setup
    
    # setup variables to be shared in tasks
    vars_files:
      vars/packages.yaml
  
    # setup hosts to run commands as
    hosts:
      - localhost
      - basestation
      - ugv
      - uav
    become_method: sudo
    become_user: root
    
    # ////////////////////////////////////////////////////////////////////////
    # Tasks to execute
    # ////////////////////////////////////////////////////////////////////////
    tasks:
      
      # ////////////////////////////////////////////////////////////////////////
      # Bitbucket SSH Key Setup
      # ////////////////////////////////////////////////////////////////////////

      - name: Creates SSH Directory
        file:
          path: ~/.ssh/
          state: directory

      - name: Remove Previously Added Bitbucket SSH Keys
        file:
          path: ~/.ssh/"{{ item.filepath }}"
          state: absent
        with_items: " {{ bitbucket_ssh_keys }} "

      - name: Copy Bitbucket SSH Keys
        copy:
          src: "{{ item.filepath }}"
          dest: ~/.ssh/
          mode: '0600'
        with_items: " {{ bitbucket_ssh_keys }} "

      - name: Remove Previously Added Bitbucket To Known Hosts
        lineinfile:
          path: $HOME/.ssh/known_hosts
          regexp: '^bitbucket.org ssh-rsa'
          state: absent
      
      - name: Add Bitbucket to Known Hosts
        shell: ssh-keyscan bitbucket.org >> $HOME/.ssh/known_hosts

      - name: Create SSH Config File
        file:
          path: ~/.ssh/config
          state: touch

      - name: Add Bitubucket to the SSH config
        lineinfile:
          path: ~/.ssh/config
          regexp: 'IdentityFile ~/.ssh/bitbucket'
          line: IdentityFile ~/.ssh/bitbucket
      
      # ////////////////////////////////////////////////////////////////////////
      # Clone Deploy Repository
      # ////////////////////////////////////////////////////////////////////////

      - name: Remove Previously Cloned Deploy Repo
        file:
          path: ~/deploy_ws/src
          state: absent

      - name: Clone The Deploy Repository
        git:
          repo: "git@bitbucket.org:cmusubt/deploy.git"
          dest: ~/deploy_ws/src
          accept_hostkey: yes
          force: yes
          key_file: ~/.ssh/bitbucket

      - name: Checkout Development Branch
        shell: 
          cmd: |
            git checkout {{ git.deploy.branch }}
            rm -rf ci docker perception launch
          chdir: ~/deploy_ws/src
        
      - name: Install Deployer Script
        shell: 
          cmd: ./install-deployer.bash --install
          chdir: ~/deploy_ws/src

      - name: Validate Deployer Install
        shell:
          cmd: ./deployer --help
          chdir: ~/deploy_ws/src
        register: deployer_status_out
      
      - name: Output Validate Deployer Install
        debug:
          msg: "Git Status: {{deployer_status_out.stdout}}"

      # ////////////////////////////////////////////////////////////////////////
      # Deploy Submodules
      # ////////////////////////////////////////////////////////////////////////

      # Common
      - name: Submodule Update Common
        shell:
          cmd: git submodule update --recursive --init common
          chdir: ~/deploy_ws/src
        ignore_errors: True

      - name: Validate Git Status
        shell:
          cmd: git status
          chdir: ~/deploy_ws/src
        register: git_status_out
    
      - name: Output Validate Git Status
        debug:
          msg: "Git Status: {{git_status_out.stdout}}"
      
      - name: Submodule Common Checkout LFS Files
        shell:
          cmd: |
            git lfs fetch
            git lfs pull
          chdir: ~/deploy_ws/src/common/communication_manager
        ignore_errors: True
  
      # Basestation
      - name: Submodule Update Basestation
        shell:
          cmd: git submodule update --recursive --init basestation
          chdir: ~/deploy_ws/src
        when: inventory_hostname is match("azure-basestation")
        ignore_errors: True

      - name: Validate Git Status
        shell:
          cmd: git status
          chdir: ~/deploy_ws/src
        register: git_status_out
    
      - name: Output Validate Git Status
        debug:
          msg: "Git Status: {{git_status_out.stdout}}"
  
      # UGV
      - name: Submodule Update UGV
        shell:
          cmd: git submodule update --recursive --init ugv
          chdir: ~/deploy_ws/src
        when: inventory_hostname is match("azure-ugv*")
        ignore_errors: True

      - name: Validate Git Status
        shell:
          cmd: git status
          chdir: ~/deploy_ws/src
        register: git_status_out
    
      - name: Output Validate Git Status
        debug:
          msg: "Git Status: {{git_status_out.stdout}}"
      
      # UAV
      - name: Submodule Update UAV
        shell:
          cmd: git submodule update --recursive --init uav
          chdir: ~/deploy_ws/src
        when: inventory_hostname is match("azure-uav*")
        ignore_errors: True

      - name: Validate Git Status
        shell:
          cmd: git status
          chdir: ~/deploy_ws/src
        register: git_status_out
    
      - name: Output Validate Git Status
        debug:
          msg: "Git Status: {{git_status_out.stdout}}"
