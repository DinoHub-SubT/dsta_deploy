---
# ////////////////////////////////////////////////////////////////////////
# Install Git Deploy Repository Setup
# ////////////////////////////////////////////////////////////////////////
- name: Install Git Deploy Repository Setup

  # setup variables to be shared in tasks
  vars_files:
    - ../vars/main.yaml

  # setup hosts to run commands as
  hosts:
    - localhost
    - basestation
    - ugv
    - uav
    - perception
  become_method: sudo
  become_user: root

  # ////////////////////////////////////////////////////////////////////////
  # Tasks to execute
  # ////////////////////////////////////////////////////////////////////////
  tasks:

    # ////////////////////////////////////////////////////////////////////////
    # Deploy Repo
    # ////////////////////////////////////////////////////////////////////////

    - name: Remove Previously Cloned Deploy Repo
      file:
        path: ~/deploy_ws/src
        state: absent

    - name: Clone The Deploy Repository
      git:
        repo: "git@bitbucket.org:cmusubt/deploy.git"
        dest: ~/deploy_ws/src
        accept_hostkey: yes
        recursive: no
        force: yes
        version: "{{ git.deploy.branch }}"
        key_file: ~/.ssh/bitbucket

    - name: Install Deployer Script
      shell:
        cmd: ./install-deployer.bash --install
        chdir: ~/deploy_ws/src

    - name: Validate Deployer Install
      shell:
        cmd: ./deployer --help
        chdir: ~/deploy_ws/src
      register: deployer_status_out

    - name: Output Validate Deployer Install
      debug:
        msg: "Git Status: {{deployer_status_out.stdout}}"

    # ////////////////////////////////////////////////////////////////////////
    # Common Submodules
    # ////////////////////////////////////////////////////////////////////////

    # Common
    - name: Submodule Update Common
      shell:
        cmd: git submodule update --recursive --init common
        chdir: ~/deploy_ws/src
      ignore_errors: True

    - name: Validate Git Status
      shell:
        cmd: git status
        chdir: ~/deploy_ws/src
      register: git_status_out

    - name: Output Validate Git Status
      debug:
        msg: "Git Status: {{git_status_out.stdout}}"

    - name: Submodule Common Checkout LFS Files
      shell:
        cmd: |
          git lfs fetch
          git lfs pull
        chdir: ~/deploy_ws/src/common/communication_manager
      ignore_errors: True

    # ////////////////////////////////////////////////////////////////////////
    # SubT Launch Submodules
    # ////////////////////////////////////////////////////////////////////////

    # Common
    - name: Submodule Update SubT Launch
      shell:
        cmd: git submodule update --recursive --init subt_launch
        chdir: ~/deploy_ws/src
      ignore_errors: True

    - name: Validate Git Status
      shell:
        cmd: git status
        chdir: ~/deploy_ws/src
      register: git_status_out

    - name: Output Validate Git Status
      debug:
        msg: "Git Status: {{git_status_out.stdout}}"

    # ////////////////////////////////////////////////////////////////////////
    # Simulation Submodules
    # ////////////////////////////////////////////////////////////////////////
    - name: Submodule Update Simulation
      shell:
        cmd: git submodule update --recursive --init simulation
        chdir: ~/deploy_ws/src
      ignore_errors: True
      when: >
        inventory_hostname is match("azure-.*")

    - name: Validate Git Status
      shell:
        cmd: git status
        chdir: ~/deploy_ws/src/simulation
      register: git_status_out
      when: >
        inventory_hostname is match("azure-.*")

    - name: Output Validate Git Status
      debug:
        msg: "Git Status: {{git_status_out.stdout}}"
      when: >
        inventory_hostname is match("azure-.*")

    - name: Submodule SubT Gazebo Sim LFS Files
      shell:
        cmd: |
          git lfs fetch
          git lfs pull
        chdir: ~/deploy_ws/src/simulation/subt_gazebo
      when: >
        inventory_hostname is match("azure-.*")

    # ////////////////////////////////////////////////////////////////////////
    # Basestation Submodules
    # ////////////////////////////////////////////////////////////////////////
    - name: Submodule Update Basestation
      shell:
        cmd: git submodule update --recursive --init basestation
        chdir: ~/deploy_ws/src
      when: >
        inventory_hostname is match("azure-basestation")  or
        inventory_hostname is match("robot-basestation")
      ignore_errors: True

    - name: Validate Git Status
      shell:
        cmd: git status
        chdir: ~/deploy_ws/src
      register: git_status_out
      when: >
        inventory_hostname is match("azure-basestation") or
        inventory_hostname is match("robot-basestation")

    - name: Output Validate Git Status
      debug:
        msg: "Git Status: {{git_status_out.stdout}}"
      when: >
        inventory_hostname is match("azure-basestation") or
        inventory_hostname is match("robot-basestation")

    # ////////////////////////////////////////////////////////////////////////
    # UGV Submodules
    # ////////////////////////////////////////////////////////////////////////
    - name: Submodule Update UGV
      shell:
        cmd: |
          git submodule update --init .
          git submodule update --init planning-pc/
          git submodule update --init nuc
        chdir: ~/deploy_ws/src/ugv/
      when: >
        inventory_hostname is match("azure-ugv.*") or
        inventory_hostname is match("robot-ugv.*-nuc") or
        inventory_hostname is match("robot-ugv.*-ppc")
      ignore_errors: True

    - name: Validate Git Status
      shell:
        cmd: git status
        chdir: ~/deploy_ws/src
      when: >
        inventory_hostname is match("azure-ugv.*") or
        inventory_hostname is match("robot-ugv.*-nuc") or
        inventory_hostname is match("robot-ugv.*-ppc")
      register: git_status_out

    - name: Output Validate Git Status
      debug:
        msg: "Git Status: {{git_status_out.stdout}}"
      when: >
        inventory_hostname is match("azure-ugv.*") or
        inventory_hostname is match("robot-ugv.*-nuc") or
        inventory_hostname is match("robot-ugv.*-ppc")

    # ////////////////////////////////////////////////////////////////////////
    # UAV Submodules
    # ////////////////////////////////////////////////////////////////////////
    - name: Submodule Update UAV
      shell:
        shell:
          cmd: |
            git submodule update --init .
            git submodule update --init core/
        chdir: ~/deploy_ws/src/uav/
      when: >
        inventory_hostname is match("azure-uav.*") or
        inventory_hostname is match("robot-uav.*")
      ignore_errors: True

    - name: Validate Git Status
      shell:
        cmd: git status
        chdir: ~/deploy_ws/src
      when:  >
        inventory_hostname is match("azure-uav.*") or
        inventory_hostname is match("robot-uav.*")
      register: git_status_out

    - name: Output Validate Git Status
      debug:
        msg: "Git Status: {{git_status_out.stdout}}"
      when: >
        inventory_hostname is match("azure-uav.*") or
        inventory_hostname is match("robot-uav.*")

<<<<<<< HEAD:operations/deploy/robotbooks/tasks/git-repository.yaml
      - name: Validate Git Status
        shell:
          cmd: git status
          chdir: ~/deploy_ws/src
        when: inventory_hostname is match("azure-ugv*")
        register: git_status_out

      - name: Output Validate Git Status
        debug:
          msg: "Git Status: {{git_status_out.stdout}}"
        when: inventory_hostname is match("azure-ugv*")

      # ////////////////////////////////////////////////////////////////////////
      # UAV Submodules
      # ////////////////////////////////////////////////////////////////////////
      - name: Submodule Update UAV
        shell:
          cmd: |
            git submodule update --init .
            git submodule update --init core/
          chdir: ~/deploy_ws/src/uav/
        when: inventory_hostname is match("azure-uav*")
        ignore_errors: True

      - name: Validate Git Status
        shell:
          cmd: git status
          chdir: ~/deploy_ws/src
        when: inventory_hostname is match("azure-uav*")
        register: git_status_out

      - name: Output Validate Git Status
        debug:
          msg: "Git Status: {{git_status_out.stdout}}"
        when: inventory_hostname is match("azure-uav*")

      # ////////////////////////////////////////////////////////////////////////
      # Perception Submodules
      # ////////////////////////////////////////////////////////////////////////
      - name: Submodule Update Perception
        shell:
          cmd: git submodule update --recursive --init perception
          chdir: ~/deploy_ws/src
        when: inventory_hostname is match("azure-perception*")
        ignore_errors: True

      - name: Validate Git Status
        shell:
          cmd: git status
          chdir: ~/deploy_ws/src
        when: inventory_hostname is match("azure-perception*")
        register: git_status_out

      - name: Output Validate Git Status
        debug:
          msg: "Git Status: {{git_status_out.stdout}}"
        when: inventory_hostname is match("azure-perception*")
=======
    # ////////////////////////////////////////////////////////////////////////
    # Perception Submodules
    # ////////////////////////////////////////////////////////////////////////
    - name: Submodule Update Perception
      shell:
        cmd: git submodule update --recursive --init perception
        chdir: ~/deploy_ws/src
      when: >
        inventory_hostname is match("azure-perception*") or
        inventory_hostname is match("robot-ugv.*-xavier")
      ignore_errors: True

    - name: Validate Git Status
      shell:
        cmd: git status
        chdir: ~/deploy_ws/src
      when: >
        inventory_hostname is match("azure-perception*") or
        inventory_hostname is match("robot-ugv.*-xavier")
      register: git_status_out

    - name: Output Validate Git Status
      debug:
        msg: "Git Status: {{git_status_out.stdout}}"
      when: >
        inventory_hostname is match("azure-perception*") or
        inventory_hostname is match("robot-ugv.*-xavier")
>>>>>>> 58d5d10... adding ugv2 robot integration operation config updates:operations/deploy/robotbooks/tasks/git-clone.yaml
