---
# ////////////////////////////////////////////////////////////////////////
# setup & install azure cli & terraform tools
# ////////////////////////////////////////////////////////////////////////
- name: Localhost Setup

  vars_files:
    - ../vars/main.yaml

  hosts:
    - laptop
  connection: local
  become_method: sudo
  become_user: root

  # ////////////////////////////////////////////////////////////////////////
  # Tasks to execute
  # ////////////////////////////////////////////////////////////////////////
  tasks:

    # ////////////////////////////////////////////////////////////////////////
    # Deployer System Tools
    # ////////////////////////////////////////////////////////////////////////

    # ////////////////////////////////////////////////////////////////////////
    # Azure CLI Tool
    # ////////////////////////////////////////////////////////////////////////
    - name: update apt packages
      become: true
      apt:
        update_cache: yes

    - name: Install Ubuntu Prerequisite Packages
      become: true
      apt:
        name: "{{ azure_cli_packages }}"
        state: present
        force_apt_get: yes

    - name: Add official GPG key of Azure CLI
      shell: curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null

    - name: Save the current Ubuntu release version
      shell: lsb_release -cs
      register: ubuntu_version

    - name: Set right Azure CLI directory
      become: true
      shell: add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ {{ ubuntu_version.stdout }} main"

    - name: Update apt packages
      become: true
      apt:
        update_cache: yes

    - name: Install Azure CLI
      become: true
      apt:
        name: azure-cli
        state: present
        force_apt_get: yes

    - name: Validate Azure CLI Version
      become: true
      shell: az --version
      register: az_version_out

    - name: Output Validate Azure CLI Version
      debug:
        msg: "Azure CLI Version: {{az_version_out.stdout}}"

    # ////////////////////////////////////////////////////////////////////////
    # Azcopy
    # ////////////////////////////////////////////////////////////////////////
    - name: Download AzCopy
      shell:
        cmd: wget -O azcopy_v10.tar.gz https://aka.ms/downloadazcopy-v10-linux && tar -xf azcopy_v10.tar.gz --strip-components=1
        chdir: /tmp/

    - name: Remove any previous azcopy versions
      become: true
      file:
        path: /usr/bin/azcopy
        state: absent

    - name: Move azcopy to bin path
      become: true
      shell: cp /tmp/azcopy /usr/bin/

    - name: Add execution permissions
      become: true
      shell: chmod +x /usr/bin/azcopy

    - name: Remove downloaded azcopy.gz
      become: true
      file:
        path: /tmp/azcopy_v10.tar.gz
        state: absent

    - name: Remove downloaded azcopy
      become: true
      file:
        path: /tmp/azcopy
        state: absent

    # ////////////////////////////////////////////////////////////////////////
    # Terraform Tool
    # ////////////////////////////////////////////////////////////////////////
    - name: Update apt packages
      become: true
      apt:
        update_cache: yes

    - name: Download Terraform Package File To Tmp
      get_url:
        url: https://releases.hashicorp.com/terraform/{{ item.version }}/terraform_{{ item.version }}_linux_amd64.zip
        dest: /tmp/
        mode: 0755
      with_items: " {{ terraform }} "

    - name: Extract Terraform Package
      unarchive:
        src: /tmp/terraform_{{ item.version }}_linux_amd64.zip
        dest: /tmp/
      with_items: " {{ terraform }} "

    - name: stat terraform
      stat: path=/tmp/terraform
      register: terraform_stat

    - name: Move Terraform To Bin
      command: mv /tmp/terraform /usr/local/bin/
      when: terraform_stat.stat.exists
      become: true

    - name: Remove file (delete file)
      file:
        path: /tmp/terraform_{{ item.version }}_linux_amd64.zip
        state: absent
      with_items: " {{ terraform }} "
