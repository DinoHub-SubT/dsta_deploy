##################################################################################################
- basestation:
##################################################################################################
  - 'export YELLOW="\033[1;33m"'
  - 'export BLUE="\033[1;36m"'
  - 'export RESET="\033[0m"'

  ################################################################################################
  - docker:
  ################################################################################################

    ####################################################
    # setup
    ####################################################
    - hostname
    - whoami
    - pwd
    
    ####################################################
    # path setup
    - 'export DEPLOY_WS=/home/$USER/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src/'
    - 'export DOCKER_CONFIG=field/robot/basestation'
    - 'export DOCKER_CONFIG_PATH=docker/env'
    
    ####################################################
    # print docker configuration information
    ####################################################
    - print:
      - echo -e "\n${BLUE} == Docker images to create == \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
      - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/robot/basestation.config \n" ;
      - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
      - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
      - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
      - while IFS= read line;
        do 
          echo -e ${BLUE} "\t$line";
        done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

    ####################################################
    # objdet docker image
    ####################################################
    - perception:
    
      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - image:
        - 'export BUILD_ARGS="--force" '
        - echo $LANG
        - ./build.bash --env field/basestation/cuda $BUILD_ARGS
        - ./build.bash --env field/basestation/tensorflow $BUILD_ARGS
        - ./build.bash --env field/basestation/perception $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" " '
        - ./run.bash --env field/basestation/perception $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/basestation/perception $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/basestation/perception $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - delete:
        - 'export DELETE_ARGS="--containers" '
        - ./build.bash --env field/basestation/cuda $DELETE_ARGS
        - ./build.bash --env field/basestation/tensorflow $DELETE_ARGS
        - ./build.bash --env field/basestation/perception $DELETE_ARGS

    ####################################################
    # misc.
    ####################################################
    - dangling:
      - docker rmi -f $(docker images -f "dangling=true" -q)
    
  ################################################################################################
  - perception:
  ################################################################################################
    # only docker container on basestation, no ssh
    - +docker:subt-perception
    
    - hostname
    - whoami
    - pwd
    - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
    - 'export DEPLOY_SRC=$DEPLOY_WS/src'
    - cd $DEPLOY_SRC

    # must source: https://github.com/catkin/catkin_tools/issues/378
    - source /opt/ros/melodic/setup.bash

    ####################################################
    # build workspaces
    ####################################################
    - build:
      - cd perception/

      # build the deps workspaces
      - thirdparty:
        - cd thirdparty/catkin
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin profile set basestation
        - catkin build --force-cmake

      # build the deps workspaces
      - objdet_deps:
        - cd objdet_deps/catkin
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin profile set basestation
        - catkin build --force-cmake
      
      # build perception workspace
      - perception:
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin profile set basestation
        - catkin build --force-cmake
      
        # build the deps workspaces
      - recording:
        - cd recording/catkin
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin profile set basestation
        - catkin build --force-cmake
      
      # build launch workspace
      - launch:
        - cd $DEPLOY_SRC/launch/
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin profile set basestation-perception
        - catkin clean -b --yes
        - catkin build

    ####################################################
    # clean workspaces
    ####################################################
    - clean:
      - cd perception/
      - launch:
        - cd $DEPLOY_SRC/launch/
        - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
            rm .catkin_tools/profiles/profiles.yaml;
          fi
        - catkin profile set basestation-perception
        - catkin clean -y
      - recording:
        - cd recording/catkin
        - catkin clean -y
      - perception:
        - catkin clean -y
      - objdet_deps:
        - cd objdet_deps/catkin
        - catkin clean -y
      - thirdparty:
        - cd thirdparty/catkin
        - catkin clean -y

    ####################################################
    # launch workspaces
    ####################################################
    - launch:
      ### == user can modify ==
      
      # launch configuration variables
      - 'export host=$(hostname)'
      - 'export MCAST_GROUP=224.0.0.251'
      - 'export robot=robots/basestation'
      - 'export USER=explorer'
      - 'export ROS_MASTER_URI=http://system76-pc:11311'
      # - 'export ROS_HOSTNAME=system76-pc'
      - 'export DISPLAY=:0.0'
      
      ### == user can modify done. ==
      
      # create the bag folder
      - mkdir -p $DEPLOY_SRC/launch/ugv_setup/logging/base_station/bags/

      # get launch configuration data
      - export CONFIG_PATH="$DEPLOY_SRC/launch/robot_launch_scripting/config/"
      # parse config file for roslaunch params
      - get_config_data() {
          CONFIG_FILE=$CONFIG_PATH/${1}.config;
          while IFS='' read -r line || [[ -n "$line" ]]; do
            if [ ! "${line:0:1}" == "#" ]; then
              config_data="$config_data $line ";
            fi
          done < "$CONFIG_FILE";
          echo ${config_data};
        }
      - export -f get_config_data

      - start:
        - objdet:
          # parse the launch configuration params
          - export config=robots/basestation/objdet
          - export config_data=$(get_config_data "$config")

          # start the tmux session
          - tmux new -s launch_objdet -d
          # export screen settings
          - tmux send -t launch_objdet 'stty columns 204' ENTER
          # - tmux send -t launch_objdet 'stty lines 55' ENTER
          # source
          - tmux send -t launch_objdet 'source $DEPLOY_WS/devel/perception/launch/setup.bash' ENTER

          # manually set the tmux env vars...for now.
          - tmux send -t launch_objdet 'unset config_data' ENTER
          - tmux send -t launch_objdet 'export config=robots/basestation/objdet' ENTER
          - tmux send -t launch_objdet 'export config_data=$(get_config_data "$config")' ENTER
          
          # run autonomy launch
          - tmux send -t launch_objdet 'mon launch robot_launch_scripting subt.launch robot:=$robot $config_data' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_objdet"

      # stop tmux sessions    
      - stop:
        # remove all the tmux sessions
        - objdet:
          - tmux kill-session -t launch_objdet
