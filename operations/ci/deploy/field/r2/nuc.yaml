####################################################################################################
# robot 2 configuration file
- r2:
  ####################################################################################################
  
    ##################################################################################################
    - nuc:
    ##################################################################################################
      - 'export YELLOW="\033[1;33m"'
      - 'export BLUE="\033[1;36m"'
      - 'export RESET="\033[0m"'
  
      ################################################################################################
      # copy deploy repo from basestation to r2.nuc
      - transfer:
      ################################################################################################
        
        ### == user can modify ==
        
        # connections
        - 'export host=nuc'
        - 'export user=nuc'
        - 'export HOP_HOST=ugv2@ugv2'
        
        # paths
        - 'export LOCAL_DEPLOY_PATH=/home/$USER/deploy_ws/src'
        - 'export REMOTE_DEPLOY_PATH=/home/$user/deploy_ws/'
        
        # rsync options
        - 'export copy_opts="
            -avzh
            --delete
            --exclude=src/basestation
            --exclude=src/docker/nv-tensorrt-repo-ubuntu1604-cuda9.0-ga-trt4.0.1.6-20180612_1-1_amd64.deb
            --exclude=src/perception/object_detection/inference/data/models/
            --exclude=src/launch/ugv_setup/logging/base_station/bags
            --exclude=src/launch/ugv_setup/logging/nuc/bags" '
        - export copy_to="rsync $copy_opts $LOCAL_DEPLOY_PATH -e 'ssh $HOP_HOST -i ~/.ssh/deploy ssh ' $user@$host:$REMOTE_DEPLOY_PATH "
        - export copy_from="rsync $copy_opts $user@$host:$REMOTE_DEPLOY_PATH $LOCAL_DEPLOY_PATH "
  
        ### == user can modify done. ==
  
        ####################################################
        # perform actual transfer. do not change.
        ####################################################
        - print:
          # print
          - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
          - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
          - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
          - echo -e "\n${YELLOW}\t username -> \t $user \n" ;
          - echo -e "\n${YELLOW}\t transfer to -> \t $copy_to \n" ;
  
        - transfer:
          - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
          - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
          - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
          - echo -e "\n${YELLOW}\t username -> \t $user \n" ;
  
          # transfer TO remote host
          - to:
            # create the remote directory
            - ssh $HOP_HOST -i ~/.ssh/deploy ssh $user@$host "mkdir -p $REMOTE_DEPLOY_PATH"
            
            # copy command
            - 'export copy_cmd=$copy_to'
  
          # transfer FROM remote host
          - from:
            - 'export copy_cmd=$copy_from'
  
          # evaluate copy
          - echo -e "\n${YELLOW}\t copy command -> \t $copy_cmd \n"
          - eval $copy_cmd
  
      ################################################################################################
      - delete-bags:
      ################################################################################################
        - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
        - +ssh:{ nuc:nuc:/home/nuc/.ssh/deploy }
        - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
        - rm -rf $DEPLOY_SRC/launch/ugv_setup/logging/nuc/bags/*
  
      ################################################################################################
      - docker:
      ################################################################################################
        - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
        - +ssh:{ nuc:nuc:/home/nuc/.ssh/deploy }
  
        ####################################################
        # setup
        ####################################################
        - hostname
        - whoami
        - pwd
        
        ####################################################
        # path setup
        - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
        - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
        - 'export DOCKER_CONFIG=field/robot/nuc'
        - 'export DOCKER_CONFIG_PATH=docker/env'
        
        ####################################################
        # print docker configuration information
        ####################################################
        - print:
          - echo -e "\n${BLUE} == Docker images to create == \n" ;
          - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
          - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
          - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
          - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/robot/nuc.config \n" ;
          - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
          - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
          - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
          - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
          - while IFS= read line;
            do 
              echo -e ${BLUE} "\t$line";
            done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"
  
        ####################################################
        # build docker images
        ####################################################
        - cd $DEPLOY_SRC/docker/scripts
        - image:
          - 'export BUILD_ARGS="--force" '
          - osrf:
            - echo $LANG
            - ./build.bash --env local/osrf/ros $BUILD_ARGS
            - ./build.bash --env local/osrf/osrf $BUILD_ARGS
          - subt:
            - ./build.bash --env local/subt/ros $BUILD_ARGS
            - ./build.bash --env field/robot/nuc $BUILD_ARGS
  
        ####################################################
        # start docker images
        ####################################################
        - start:
          - 'export START_ARGS=" --no-nvidia " '
          - ./run.bash --env field/robot/nuc $START_ARGS
  
        ####################################################
        # stop docker images
        ####################################################
        - stop:
          - 'export STOP_ARGS="--stop --containers " '
          - ./clean.bash --env field/robot/nuc $STOP_ARGS
        
        - remove:
          - 'export STOP_ARGS="--remove --containers " '
          - ./clean.bash --env field/robot/nuc $STOP_ARGS
        
        ####################################################
        # delete docker images & corresponding containers
        ####################################################
        - delete:
          - 'export DELETE_ARGS="--containers" '
          - ./clean.bash --env field/robot/nuc $DELETE_ARGS
          - ./clean.bash --env local/subt/ros $DELETE_ARGS
          - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
          - ./clean.bash --env local/osrf/ros $DELETE_ARGS
        
        ####################################################
        # misc.
        ####################################################
        - dangling:
          - docker rmi -f $(docker images -f "dangling=true" -q)
        
      ################################################################################################
      - deploy:
      ################################################################################################
        # only docker container on basestation, no ssh
        - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
        - +ssh:{ nuc:nuc:/home/nuc/.ssh/deploy }
        
        - hostname
        - whoami
        - pwd
        - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src'
        - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
        - cd $DEPLOY_SRC
    
        ####################################################
        # clone workspaces
        ####################################################
        - clone:
  
          # clone & update the planning workspace
          - cd planning/
          
          # setup the rosinstalls
          - rosinstall:
            - planning:
              - thirdparty:
                - cd thirdparty/catkin
                - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
                - ln -s $DEPLOY_SRC/rosinstall/planning/thirdparty.rosinstall .rosinstall
              - repo:
                - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
                - ln -s $DEPLOY_SRC/rosinstall/planning/planning.rosinstall .rosinstall
              - hardware:
                - cd hardware/catkin
                - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
                - ln -s $DEPLOY_SRC/rosinstall/planning/hardware.rosinstall .rosinstall
            - state_est:
              - cd $DEPLOY_SRC/state_estimation
              - repo:
                - if [ -f .rosinstall ]; then
                      rm .rosinstall;
                    fi
                - ln -s $DEPLOY_SRC/rosinstall/state_est/state_est.rosinstall .rosinstall
              - thirdparty:
                - cd thirdparty/catkin
                - if [ -f .rosinstall ]; then
                      rm .rosinstall;
                    fi
                - ln -s $DEPLOY_SRC/rosinstall/state_est/thirdparty.rosinstall .rosinstall
  
          # wstool update the workspaces
          - up:
            - planning:
              - thirdparty:
                - cd thirdparty/catkin
                - wstool info
                - wstool update
              - repo:
                - wstool info
                - wstool update
              - hardware:
                - cd hardware/catkin
                - wstool info
                - wstool update
            - state_est:
              - cd $DEPLOY_SRC/state_estimation
              - repo:
                - wstool info
                - wstool update
              - thirdparty:
                - cd thirdparty/catkin
                - wstool info
                - wstool update
  
        # install any thirdparty deps
        - setup:
          - xsens:
            - cd $DEPLOY_SRC/state_estimation/xsens/catkin/xsens_cpp_driver/receive_xsens/config/mt_sdk
            - sudo ./mt_sdk_4.8.sh
          
        ####################################################
        # build workspaces
        ####################################################
        - build:
          - planning:
            - cd planning/
  
            # build the hardware workspace
            - thirdparty:
              - cd thirdparty/catkin
              - catkin build
  
            # build planning workspace
            - repo:
              - catkin build --force-cmake
  
            # build the hardware workspace
            - hardware:
              - cd hardware/catkin
              - catkin build --force-cmake
  
            # build launch workspace
            - launch:
              - cd $DEPLOY_SRC/launch/
              - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
                  rm .catkin_tools/profiles/profiles.yaml;
                fi
              - catkin profile set planning
              - catkin clean -b --yes
              - catkin build --force-cmake
  
          # build the state_est
          - state_est:
            - cd $DEPLOY_SRC/state_estimation/
            # misc. workspaces
            - thirdparty:
              - cd thirdparty/catkin
              - catkin build --force-cmake
            - repo:
              - catkin build --force-cmake
            - launch:
              - cd $DEPLOY_SRC/launch/
              - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
                  rm .catkin_tools/profiles/profiles.yaml;
                fi
              - catkin profile set state_est
              - catkin clean -b --yes
              - catkin build --force-cmake
            # laser odometry workspace
            - laser_odometry:
              - cd laser_odometry/catkin
              - catkin build --force-cmake

        ####################################################
        # clean workspaces
        ####################################################
        - clean:
          - planning:
            - launch:
              - cd $DEPLOY_SRC/launch/
              - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
                  rm .catkin_tools/profiles/profiles.yaml;
                fi
              - catkin profile set planning
              - catkin clean -y
            - cd $DEPLOY_SRC/planning/
            - hardware:
              - cd hardware/catkin
              - catkin clean -y
            - repo:
              - catkin clean -y
            - thirdparty:
              - cd thirdparty/catkin
              - catkin clean -y

          - state_est:
            - launch:
              - cd $DEPLOY_SRC/launch/
              - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
                  rm .catkin_tools/profiles/profiles.yaml;
                fi
              - catkin profile set state_est
              - catkin clean -y
            - cd $DEPLOY_SRC/state_estimation/
            - repo:
              - catkin clean -y
            - thirdparty:
              - cd thirdparty/catkin
              - catkin clean -y
            # laser odometry workspace
            - laser_odom:
              - cd laser_odometry/catkin
              - catkin clean -y
  
        ####################################################
        # remove workspaces
        ####################################################
        - rm:
          - planning:
            - cd planning/
            - repo:
              - find . -maxdepth 1 \! \( -name thirdparty -o -name hardware -o -name .catkin_tools \) -exec rm -rf '{}' \;
            - hardware:
              - cd hardware/catkin
              - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
            - thirdparty:
              - cd thirdparty/catkin
              - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - state_est:
            - cd $DEPLOY_SRC/state_estimation/
            - repo:
              - find . -maxdepth 1 \! \( -name thirdparty -o -name loam -o -name .catkin_tools \) -exec rm -rf '{}' \;
            - thirdparty:
              - cd thirdparty/catkin
              - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;

        ####################################################
        # launch workspaces
        ####################################################
        - launch:
          ### == user can modify ==
          
          # launch configuration variables
          - 'export host=$(hostname)'
          - 'export MCAST_GROUP=224.0.0.251'
          - 'export UGV_NUC=true'
          - 'export USER=nuc'
          - 'export ROS_MASTER_URI=http://ugv2:11311'
          - 'export ROS_HOSTNAME=nuc'
          
          ### == user can modify done. ==
  
          # create the bag folder
          - mkdir -p $DEPLOY_SRC/launch/ugv_setup/logging/nuc/bags/
  
          # get launch configuration data
          - export CONFIG_PATH="$DEPLOY_SRC/launch/robot_launch_scripting/config/"
          # parse config file for roslaunch params
          - get_config_data() {
              CONFIG_FILE=$CONFIG_PATH/${1}.config;
              while IFS='' read -r line || [[ -n "$line" ]]; do
                if [ ! "${line:0:1}" == "#" ]; then
                  config_data="$config_data $line ";
                fi
              done < "$CONFIG_FILE";
              echo ${config_data};
            }
          - export -f get_config_data
          
          - start:
            # planning
            # start the tmux session
            - tmux new -s launch_planning -d
            # source
            - tmux send -t launch_planning 'source $DEPLOY_WS/devel/planning/launch/setup.zsh' ENTER
            # manually set the tmux env vars...for now.
            - tmux send -t launch_planning 'unset config_data_planning' ENTER
            - tmux send -t launch_planning 'export config=robots/r2/nuc/planning' ENTER
            - tmux send -t launch_planning 'export config_data_planning=$(get_config_data "$config")' ENTER
            # run nuc launch
            - tmux send -t launch_planning 'mon launch robot_launch_scripting subt.launch robot:=robots/nuc computer:=ugv2 robot_id:=2 computer:=ugv2 autonomy:=true state_est:=false node_dropper:=false xsens:=false health_monitor:=false' ENTER
            # message user
            - echo "Launch deployed in tmux session launch_planning"
  
            ### state_est (deploy repo launch) ###
            # start the tmux session
            - tmux new -s launch_state_est -d
            # source
            - tmux send -t launch_state_est 'source $DEPLOY_WS/devel/state_estimation/launch/setup.zsh' ENTER
            # manually set the tmux env vars...for now.
            - tmux send -t launch_state_est 'unset config_data_se' ENTER
            - tmux send -t launch_state_est 'export config=robots/r2/nuc/state_est' ENTER
            - tmux send -t launch_state_est 'export config_data_se=$(get_config_data "$config")' ENTER
            # run nuc launch
            - tmux send -t launch_state_est 'mon launch robot_launch_scripting subt.launch robot:=robots/nuc robot_id:=2 computer:=ugv2 autonomy:=false state_est:=true node_dropper:=false xsens:=false' ENTER
            # message user
            - echo "Launch deployed in tmux session launch_state_est"
  
            # rosbag
            # start record hardware
            - tmux new -s launch_rosbag -d
            # source
            - tmux send -t launch_rosbag 'source $DEPLOY_WS/devel/planning/launch/setup.zsh' ENTER
            # manually set the tmux env vars...for now.
            - tmux send -t launch_rosbag 'unset config_data_rosbag' ENTER
            - tmux send -t launch_rosbag 'export config=robots/r2/nuc/rosbag' ENTER
            - tmux send -t launch_rosbag 'export config_data_rosbag=$(get_config_data "$config")' ENTER
            # launch rosbag
            # - tmux send -t launch_rosbag 'eval $config_data_rosbag' ENTER
            - tmux send -t launch_rosbag 'cd ~/deploy_ws/src/launch/ugv_setup/logging/nuc/bags/ && ./../scripts/nuc.bash' ENTER
  
            # shell
            # empty shell prompt
            - pwd
            - tmux new -s ros_shell -d
            - tmux send -t ros_shell 'source $DEPLOY_WS/devel/state_estimation/launch/setup.zsh' ENTER
  
          # stop tmux sessions    
          - stop:
            # remove all the tmux sessions
            - rosbag:
                - stop:
                  # start stop record
                  - tmux new -s launch_rosbag_stop -d
                  - tmux send -t launch_rosbag_stop 'source $DEPLOY_WS/devel/planning/launch/setup.zsh' ENTER  
                  # stop record node
                  - tmux send -t launch_rosbag_stop 'rosnode kill /rosbag_recording_nuc' ENTER
                - sessions:
                  # stop the sessions
                  # - until rostopic list ; do sleep 1; done
                  - tmux kill-session -t launch_rosbag_stop
                  - tmux kill-session -t launch_rosbag
            - other:  
              - tmux kill-session -t launch_state_est
              - tmux kill-session -t launch_planning
              - tmux kill-session -t ros_shell
            
          - rosclean:
            # stop all ros nodes
            - source $DEPLOY_WS/devel/planning/repo/setup.zsh
            - ps aux | grep ros
            - rosnode kill -a
            - pkill -f ros
            - rosnode list
            - ps aux | grep ros
  
  
      ################################################################################################
      - local:
      ################################################################################################
        # only docker container on basestation, no ssh
        - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
        - +ssh:{ nuc:nuc:/home/nuc/.ssh/deploy }
        # launch configuration variables
        - 'export host=$(hostname)'
        - 'export MCAST_GROUP=224.0.0.251'
        - 'export UGV_NUC=true'
        - 'export USER=nuc'
        - 'export ROS_MASTER_URI=http://ugv2:11311'
        - 'export ROS_HOSTNAME=nuc'
        
        - build:
          - cd ~/deploy_ws/src/

          - objdet:
            - cd perception/
            - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
                rm .catkin_tools/profiles/profiles.yaml;
              fi
            # is this needed?
            - rm -rf .catkin_tools/profiles/default
            - catkin profile set nuc
            - cd object_detection/
            # NOTE: temporary. modules requires CUDA flag, not set in nuc, so ignore.
            - touch modules/CATKIN_IGNORE
            - touch realsense_fork/CATKIN_IGNORE
            - catkin build --force-cmake
  
        - clean:
          - cd ~/deploy_ws/src/
          - objdet:
            - cd perception/object_detection/
            - catkin clean
  
        - launch:
          # start tmux sessions
          - start:
            #########################################################################################
            ### loam -- launches loam, velodyne driver, xsens driver ###
            # start the tmux session
            - tmux new -s loam -d
            # source
            # - tmux send -t loam 'source /home/nuc/workspace/loam_ws/devel/setup.zsh' ENTER
            - tmux send -t loam 'source $DEPLOY_WS/devel/state_estimation/laser_odometry/setup.zsh' ENTER
            # run planning-pc launch
            - tmux send -t loam 'mon launch loam_velodyne_16 loam_velodyne_16_headless.launch blind_back_arg:=-1.31' ENTER
            # message user
            - echo "Launch loam in tmux session loam"
            #########################################################################################
            
            # ### wifi-bluetooth ###
            # start the tmux session
            - tmux new -s wifi-bluetooth -d
            # source
            - tmux send -t wifi-bluetooth 'source /home/nuc/deploy_ws/devel/perception/objdet/setup.zsh' ENTER
            # run wifi-bluetooth launch
            - tmux send -t wifi-bluetooth 'roslaunch bluetooth_detection mk_1_nuc.launch' ENTER
            # message user
            - echo "Launch wifi-bluetooth in tmux session wifi-bluetooth"
            
            # map-resender
            # start the tmux session
            - tmux new -s map-resender -d
            # source
            - tmux send -t map-resender 'source /home/nuc/deploy_ws/devel/perception/objdet/setup.zsh' ENTER
            # run wifi-bluetooth launch
            - tmux send -t map-resender 'roslaunch map_resender map_resender.launch' ENTER
            # message user
            - echo "Launch map-resender in tmux session map-resender"
  
          # stop tmux sessions
          - stop:
            - tmux kill-session -t loam
            - tmux kill-session -t wifi-bluetooth          
            - tmux kill-session -t map-resender
  