####################################################################################################
# robot 2 configuration file
- r2:
####################################################################################################

  ##################################################################################################
  - planning-pc:
  ##################################################################################################
    - 'export YELLOW="\033[1;33m"'
    - 'export BLUE="\033[1;36m"'
    - 'export RESET="\033[0m"'

    ################################################################################################
    # copy deploy repo from basestation to r1.planning-pc
    - transfer:
    ################################################################################################
      
      ### == user can modify ==
      # testing setp

      # connections
      - 'export host=ugv2'
      - 'export user=ugv2'
  
      # paths
      - 'export LOCAL_DEPLOY_PATH=/home/$USER/deploy_ws/src'
      - 'export REMOTE_DEPLOY_PATH=/home/$user/deploy_ws/'
      
      # rsync options
      - 'export copy_opts="
          -avzh
          --delete
          --exclude=src/basestation
          --exclude=src/docker/nv-tensorrt-repo-ubuntu1604-cuda9.0-ga-trt4.0.1.6-20180612_1-1_amd64.deb
          --exclude=src/perception
          --exclude=src/state_estimation
          --exclude=src/launch/ugv_setup/logging/planning-pc/bags
          --exclude=src/launch/ugv_setup/logging/base_station/bags
          -e \"ssh -i $HOME/.ssh/deploy\" " ' 
      # rsync commands
      - export copy_to="rsync $copy_opts $LOCAL_DEPLOY_PATH $user@$host:$REMOTE_DEPLOY_PATH "
      - export copy_from="rsync $copy_opts $user@$host:$REMOTE_DEPLOY_PATH $LOCAL_DEPLOY_PATH "

      ### == user can modify done. ==

      ####################################################
      # perform actual transfer. do not change.
      ####################################################
      - print:
        # print
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;
        - echo -e "\n${YELLOW}\t transfer to -> \t $copy_to \n" ;

      - transfer:
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;

        # transfer TO remote host
        - to:
          # create the remote directory
          - ssh $user@$host -i ~/.ssh/deploy "mkdir -p $REMOTE_DEPLOY_PATH"

          # copy command
          - 'export copy_cmd=$copy_to'

        # transfer FROM remote host
        - from:
          - 'export copy_cmd=$copy_from'

        # evaluate copy
        - echo -e "\n${YELLOW}\t copy command -> \t $copy_cmd \n"
        - eval $copy_cmd

    ################################################################################################
    - delete-bags:
    ################################################################################################
      - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
      - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
      - rm -rf $DEPLOY_SRC/launch/ugv_setup/logging/planning-pc/bags/*

    ################################################################################################
    - docker:
    ################################################################################################
      - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }

      ####################################################
      # setup
      ####################################################
      - hostname
      - whoami
      - pwd
      
      ####################################################
      # path setup
      - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
      - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
      - 'export DOCKER_CONFIG=field/robot/planning-pc'
      - 'export DOCKER_CONFIG_PATH=docker/env'
      
      ####################################################
      # print docker configuration information
      ####################################################
      - print:
        - echo -e "\n${BLUE} == Docker images to create == \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/robot/planning-pc.config \n" ;
        - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
        - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
        - while IFS= read line;
          do 
            echo -e ${BLUE} "\t$line";
          done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - image:
        - 'export BUILD_ARGS="--force" '
        - osrf:
          - echo $LANG
          - ./build.bash --env local/osrf/ros $BUILD_ARGS
          - ./build.bash --env local/osrf/osrf $BUILD_ARGS
        - subt:
          - ./build.bash --env local/subt/ros $BUILD_ARGS
          - ./build.bash --env field/robot/planning-pc $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" --no-nvidia " '
        - ./run.bash --env field/robot/planning-pc $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/robot/planning-pc $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/robot/planning-pc $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - delete:
        - 'export DELETE_ARGS="--containers" '
        - ./clean.bash --env field/robot/planning-pc $DELETE_ARGS
        - ./clean.bash --env local/subt/ros $DELETE_ARGS
        - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
        - ./clean.bash --env local/osrf/ros $DELETE_ARGS
      
      ####################################################
      # misc.
      ####################################################
      - dangling:
        - docker rmi -f $(docker images -f "dangling=true" -q)
      
    ################################################################################################
    - deploy:
    ################################################################################################
      - +ssh:{ ugv2:ugv2:/home/$USER/.ssh/deploy }
      - +docker:subt
      
      - hostname
      - whoami
      - pwd
      - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
      - 'export DEPLOY_WS=/home/developer/deploy_ws/'
      - cd $DEPLOY_SRC
  
      ####################################################
      # clone workspaces
      ####################################################
      - clone:

        # download the subt_robot_examples_latest
        # NOTE: only do this on ONCE. requires internet access.
        - download:
          - if [ -f subt_robot_examples_latest.tgz ]; then
              rm subt_robot_examples_latest.tgz;
            fi
          - wget --no-check-certificate https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz

        # clone & update the planning workspace
        - cd planning/
        
        # setup the rosinstalls
        - rosinstall:
          - planning:
            - thirdparty:
              - cd thirdparty/catkin
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/thirdparty.rosinstall .rosinstall
            - repo:
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/planning.rosinstall .rosinstall
            - hardware:
              - cd hardware/catkin
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/hardware.rosinstall .rosinstall

        # wstool update the workspaces
        - up:
          - planning:
            - thirdparty:
              - cd thirdparty/catkin
              - wstool info
              - wstool update
            - repo:
              - wstool info
              - wstool update
            - hardware:
              - cd hardware/catkin
              - wstool info
              - wstool update

      ####################################################
      # rosdep
      # -- assumes the extended ws are already built
      # -- add only those repos that need rosdep
      ####################################################
      - setup:
        # install any thirdparty deps
        - cd planning
        - planning:
          - ./Planning_workspace/install_dependencies.sh
        - copley:
          - cd $DEPLOY_SRC/planning/copley_ros_driver/setup/
          - ./install_copley_module.sh

      ####################################################
      # build workspaces
      ####################################################
      - build:
        - planning:
          - cd planning/

          # build the hardware workspace
          - thirdparty:
            - cd thirdparty/catkin
            - catkin build --force-cmake

          # build planning workspace
          - repo:
            - catkin build --force-cmake

          # build the hardware workspace
          - hardware:
            - cd hardware/catkin
            - catkin build --force-cmake

          # build launch workspace
          - launch:
            - cd $DEPLOY_SRC/launch/
            - rm .catkin_tools/profiles/profiles.yaml
            - catkin profile set planning
            - catkin clean -b --yes
            - catkin build --force-cmake

      ####################################################
      # clean workspaces
      ####################################################
      - clean:
        - launch:
          - cd $DEPLOY_SRC/launch/
          - catkin clean -y
        - planning:
          - cd $DEPLOY_SRC/planning/
          - hardware:
            - cd hardware/catkin
            - catkin clean -y
          - repo:
            - catkin clean -y
          - thirdparty:
            - cd thirdparty/catkin
            - catkin clean -y

      ####################################################
      # remove workspaces
      ####################################################
      - rm:
        - planning:
          - cd planning/
          - repo:
            - find . -maxdepth 1 \! \( -name thirdparty -o -name hardware -o -name .catkin_tools \) -exec rm -rf '{}' \;
          - hardware:
            - cd hardware/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - thirdparty:
            - cd thirdparty/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;

      ####################################################
      # launch workspaces
      ####################################################
      - launch:
        ### == user can modify ==
        
        # launch configuration variables
        - 'export host=$(hostname)'
        - 'export MCAST_GROUP=224.0.0.251'
        - 'export USER=ugv2'
        - 'export ROS_MASTER_URI=http://ugv2:11311'
        - 'export ROS_HOSTNAME=ugv2'
        
        ### == user can modify done. ==

        # create the bag folder
        - mkdir -p $DEPLOY_SRC/launch/ugv_setup/logging/planning-pc/bags/

        # get launch configuration data
        - export CONFIG_PATH="$DEPLOY_SRC/launch/robot_launch_scripting/config/"
        # parse config file for roslaunch params
        - get_config_data() {
            CONFIG_FILE=$CONFIG_PATH/${1}.config;
            while IFS='' read -r line || [[ -n "$line" ]]; do
              if [ ! "${line:0:1}" == "#" ]; then
                config_data="$config_data $line ";
              fi
            done < "$CONFIG_FILE";
            echo ${config_data};
          }
        - export -f get_config_data

        - start:
          # roscore
          # enable roscore
          - 'export ROS_MASTER=true'
          # start the tmux sessions
          - tmux new -s ${host}_roscore -d
          # source
          - tmux send -t ${host}_roscore 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
          # run roscore
          - tmux send -t ${host}_roscore 'rosrun robot_launch_scripting launch_roscore.sh' ENTER
          
          # planning
          # parse the launch configuration params
          - export config=robots/r2/planning-pc/planning
          - export config_data=$(get_config_data "$config")

          # start the tmux session
          - tmux new -s launch_planning -d
          # source
          - tmux send -t launch_planning 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
          
          # manually set the tmux env vars...for now.
          - tmux send -t launch_planning 'unset config_data' ENTER
          - tmux send -t launch_planning 'export config=robots/r2/planning-pc/planning' ENTER
          - tmux send -t launch_planning 'export config_data=$(get_config_data "$config")' ENTER

          # run autonomy launch
          - tmux send -t launch_planning 'mon launch robot_launch_scripting subt.launch $config_data' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_planning"
        
          # hardware
          # parse the launch configuration params
          - export config=robots/r2/planning-pc/hardware
          - export config_data=$(get_config_data "$config")

          # start the tmux session
          - tmux new -s launch_hardware -d
          # source
          - tmux send -t launch_hardware 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
          
          # manually set the tmux env vars...for now.
          - tmux send -t launch_hardware 'unset config_data' ENTER
          - tmux send -t launch_hardware 'export config=robots/r2/planning-pc/hardware' ENTER
          - tmux send -t launch_hardware 'export config_data=$(get_config_data "$config")' ENTER

          # run hardware launch
          - tmux send -t launch_hardware 'mon launch robot_launch_scripting subt.launch $config_data' ENTER
          # message user
          - echo "Launch deployed in tmux session ${host}_launch_${config}"
          
          # rosbag
          # start record hardware
          - tmux new -s launch_rosbag -d
          # source
          - tmux send -t launch_rosbag 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER
          # manually set the tmux env vars...for now.
          - tmux send -t launch_rosbag 'unset config_data' ENTER
          - tmux send -t launch_rosbag 'export config=robots/r2/planning-pc/rosbag' ENTER
          - tmux send -t launch_rosbag 'export config_data=$(get_config_data "$config")' ENTER
          # launch rosbag
          - tmux send -t launch_rosbag 'eval $config_data' ENTER
          
          # shell
          # empty shell prompt
          - pwd
          - tmux new -s ros_shell -d
          - tmux send -t ros_shell 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER

        - stop:
          # remove all the tmux sessions
          - rosbag:
              - stop:
                # start stop record
                - tmux new -s launch_rosbag_stop -d
                - tmux send -t launch_rosbag_stop 'source $DEPLOY_WS/devel/planning/launch/setup.bash' ENTER  
                # stop record node
                - tmux send -t launch_rosbag_stop 'rosnode kill /rosbag_recording_planning_pc' ENTER
              - sessions:
                # stop the sessions
                # - until rostopic list ; do sleep 1; done
                - tmux kill-session -t launch_rosbag_stop
                - tmux kill-session -t launch_rosbag
          - other:
            - tmux kill-session -t ${host}_roscore
            - tmux kill-session -t launch_planning
            - tmux kill-session -t launch_hardware
            - tmux kill-session -t ros_shell
          
        - rosclean:
          # stop all ros nodes
          - source $DEPLOY_WS/devel/planning/repo/setup.bash
          - ps aux | grep ros
          - rosnode kill -a
          - pkill -f ros
          - rosnode list
          - ps aux | grep ros

