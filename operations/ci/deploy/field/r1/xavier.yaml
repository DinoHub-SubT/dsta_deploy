####################################################################################################
# robot 1 configuration file
- r1:
####################################################################################################

  ##################################################################################################
  - xavier:
  ##################################################################################################
    - 'export YELLOW="\033[1;33m"'
    - 'export BLUE="\033[1;36m"'

    ################################################################################################
    # copy deploy repo from basestation to r1.xavier
    - transfer:
    ################################################################################################
      
      ### == user can modify ==
      
      # connections
      - 'export user=nvidia'
      - 'export host=xavier'
      - 'export HOP_HOST=robot@planning-pc'
      
      # paths
      - 'export LOCAL_DEPLOY_PATH=/home/$USER/deploy_ws/src'
      - 'export REMOTE_DEPLOY_PATH=/home/$user/deploy_ws/'
      
      # rsync options
      - export copy_opts="-avzh --delete
        --exclude=src/basestation
        --exclude=src/planning
        --exclude=src/state_estimation
        --exclude=src/launch/ugv_setup/logging/base_station/bags
        --exclude=src/docker/nv-tensorrt-repo-ubuntu1604-cuda9.0-ga-trt4.0.1.6-20180612_1-1_amd64.deb 
        --exclude=src/subt_robot_examples_latest.tgz 
        --exclude=src/perception/object_detection/inference/data/models/"
      - export copy_to="rsync $copy_opts $LOCAL_DEPLOY_PATH -e 'ssh $HOP_HOST ssh ' $user@$host:$REMOTE_DEPLOY_PATH "
      - export copy_from="rsync $copy_opts $user@$host:$REMOTE_DEPLOY_PATH $LOCAL_DEPLOY_PATH "

      ### == user can modify done. ==

      ####################################################
      # perform actual transfer. do not change.
      ####################################################
      - print:
        # print
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;
        - echo -e "\n${YELLOW}\t transfer to -> \t $copy_to \n" ;

      - transfer:
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;

        # transfer TO remote host
        - to:
          # create the remote directory
          - ssh $HOP_HOST ssh $user@$host "mkdir -p $REMOTE_DEPLOY_PATH"
          
          # copy command
          - 'export copy_cmd=$copy_to'

        # transfer TO remote host
        # ignoring transfer.to delete of 'ssd_mnv1_positives_218056' so we do not lose protobuf generation
        # users must force a transfer clean.
        # TODO: re-structure setups
        - to-models:
          # create the remote directory
          - ssh $HOP_HOST ssh $user@$host "mkdir -p $REMOTE_DEPLOY_PATH"
          
          # copy command
          - export copy_opts="-avzh --delete
                --exclude=src/planning
                --exclude=src/basestation
                --exclude=src/state_estimation
                --exclude=src/launch/ugv_setup/logging/base_station/bags
                --exclude=src/docker/nv-tensorrt-repo-ubuntu1604-cuda9.0-ga-trt4.0.1.6-20180612_1-1_amd64.deb 
                --exclude=src/subt_robot_examples_latest.tgz "
          - export copy_to="rsync $copy_opts $LOCAL_DEPLOY_PATH -e 'ssh $HOP_HOST ssh ' $user@$host:$REMOTE_DEPLOY_PATH "
          - 'export copy_cmd=$copy_to'

        # transfer FROM remote host
        - from:
          - 'export copy_cmd=$copy_from'

        # evaluate copy
        - echo -e "\n${YELLOW}\t copy command -> \t $copy_cmd \n"
        - eval $copy_cmd

    ################################################################################################
    - delete-bags:
    ################################################################################################
      - +ssh:{robot:planning-pc:/home/$USER/.ssh/deploy }
      - +ssh:{nvidia:xavier:/home/nvidia/.ssh/nuc }
      - rm -rf /logging/*
      
    ################################################################################################
    - deploy:
    ################################################################################################
      - +ssh:{robot:planning-pc:/home/$USER/.ssh/deploy }
      - +ssh:{nvidia:xavier:/home/nvidia/.ssh/nuc }
      
      - hostname
      - whoami
      - pwd
      - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src'
      - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
      - cd $DEPLOY_SRC
      - pwd

      # Cuda paths
      - 'export PATH=/usr/local/cuda/bin:${PATH}'
      - 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}'
      - 'export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/extras/CUPTI/lib64'
      - 'export CUDA_HOME=/usr/local/cuda'
      # Bazel install
      - 'export PATH=${PATH}:${HOME}/bin'
      # Object Detection API
      - 'export PYTHONPATH=${PYTHONPATH}:/opt/models/research:/opt/models/research/slim'

      ####################################################
      # clone workspaces
      ####################################################
      - clone:
    
        # clone & update the perception workspace
        - cd perception/

        # update the git submodule
        - submodule:
          - cd object_detection
          - git submodule init
          - git submodule update --recursive
        
        # setup the rosinstalls
        - rosinstall:
          - perception:
            - cd $DEPLOY_SRC/perception
            - thirdparty:
              - cd thirdparty/catkin
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/perception/thirdparty.rosinstall .rosinstall
            - recording:
              - cd recording/catkin
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/perception/recording.rosinstall .rosinstall
        
        # wstool update the workspaces
        - up:
          # perception ws update
          - perception:
            - cd $DEPLOY_SRC/perception
            - thirdparty:
              - cd thirdparty/catkin
              - wstool info
              - wstool update
            - recording:
              - cd recording/catkin
              - wstool info
              - wstool update

      ####################################################
      # setup the workspaces
      ####################################################
      - setup:
        - cd $DEPLOY_SRC/perception/object_detection/training/tensorrt/
        - sudo jetson_clocks
        - ./export_tf_trt_graph.py --inference_folder ../../inference/data/models/rgb_negative_08_06 --batch_size 4
        - ./export_tf_trt_graph.py --inference_folder ../../inference/data/models/thermal_negative_08_06 --batch_size 1

      ####################################################
      # build workspaces
      ####################################################
      - build:
        - cd perception/
        
        # build the deps workspaces
        - thirdparty:
          - cd thirdparty/catkin
          - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
              rm .catkin_tools/profiles/profiles.yaml;
            fi
          - catkin profile set default
          - catkin build --force-cmake
        
        # build the deps workspaces
        - objdet_deps:
          - cd objdet_deps/catkin
          - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
              rm .catkin_tools/profiles/profiles.yaml;
            fi
          - catkin profile set default
          - catkin build --force-cmake
        
        # build perception workspace
        - perception:
          - catkin profile set default
          - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
              rm .catkin_tools/profiles/profiles.yaml;
            fi
          - catkin build --force-cmake
        
          # build the deps workspaces
        - recording:
          - cd recording/catkin
          - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
              rm .catkin_tools/profiles/profiles.yaml;
            fi
          - catkin profile set default
          - catkin build --force-cmake
        
        # build launch workspace
        - launch:
          - cd $DEPLOY_SRC/launch/
          - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
              rm .catkin_tools/profiles/profiles.yaml;
            fi
          - catkin profile set perception
          - catkin clean -b --yes
          - catkin build

      ####################################################
      # clean workspaces
      ####################################################
      - clean:
        - cd perception/
        - launch:
          - cd $DEPLOY_SRC/launch/
          - if [ -f .catkin_tools/profiles/profiles.yaml ]; then
              rm .catkin_tools/profiles/profiles.yaml;
            fi
          - catkin profile set perception
          - catkin clean -y
        - recording:
          - cd recording/catkin
          - catkin clean -y
        - perception:
          - catkin clean -y
        - objdet_deps:
          - cd objdet_deps/catkin
          - catkin clean -y
        - thirdparty:
          - cd thirdparty/catkin
          - catkin clean -y

      ####################################################
      # remove workspaces
      ####################################################
      - rm:
        - perception:
          - cd perception/
          - recording:
            - cd recording/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools -o -name CATKIN_IGNORE \) -exec rm -rf '{}' \;
          - thirdparty:
            - cd thirdparty/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools -o -name CATKIN_IGNORE \) -exec rm -rf '{}' \;

      ####################################################
      # launch workspaces
      ####################################################
      - launch:
        ### == user can modify ==
        
        # launch configuration variables
        - 'export host=$(hostname)'
        - 'export MCAST_GROUP=224.0.0.251'
        - 'export ROBOT_NAME=ugv1'
        - 'export USER=nvidia'
        - 'export ROS_MASTER_URI=http://planning-pc:11311'
        - 'export ROS_HOSTNAME=xavier'
        - 'export ROS_MASTER=false'

        ### == user can modify done. ==
        - start:
          # cameras
          # start the tmux session
          - tmux new -s launch_cameras -d
          # source
          - tmux send -t launch_cameras 'source $DEPLOY_WS/devel/perception/launch/setup.zsh' ENTER
          # run perception-pc launch
          - tmux send -t launch_cameras 'roslaunch robot_launch_scripting subt.launch robot:=robots/xavier 
              xavier_cameras:=true xavier_realsense_launch:=silver_payload_xavier xavier_flir_launch:=silver_payload' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_cameras"
          # inference
          # start the tmux session
          - tmux new -s launch_inference -d
          # source
          - tmux send -t launch_inference 'source $DEPLOY_WS/devel/perception/launch/setup.zsh' ENTER
          # run perception-pc launch
          - tmux send -t launch_inference 'roslaunch robot_launch_scripting subt.launch robot:=robots/xavier
              xavier_inference:=true xavier_inference_launch:=silver_payload' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_inference"
          # modules
          # start the tmux session
          - tmux new -s launch_modules -d
          # source
          - tmux send -t launch_modules 'source $DEPLOY_WS/devel/perception/launch/setup.zsh' ENTER
          # run perception-pc launch
          - tmux send -t launch_modules 'roslaunch robot_launch_scripting subt.launch robot:=robots/xavier
              xavier_modules:=true xavier_modules_launch:=silver_payload' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_modules"
          # recorder
          # start the tmux session
          - tmux new -s launch_record -d
          # source
          - tmux send -t launch_record 'source $DEPLOY_WS/devel/perception/launch/setup.zsh' ENTER
          # run perception-pc launch
          - tmux send -t launch_record 'roslaunch robot_launch_scripting subt.launch robot:=robots/xavier xavier_record:=true' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_record"
          #  healthmonitor
          # start the tmux session
          - tmux new -s launch_healthmonitor -d
          # source
          - tmux send -t launch_healthmonitor 'source $DEPLOY_WS/devel/perception/launch/setup.zsh' ENTER
          # run perception-pc launch
          - tmux send -t launch_healthmonitor 'roslaunch robot_launch_scripting subt.launch robot:=robots/xavier health_monitor:=true computer:=ugv1' ENTER
          # message user
          - echo "Launch deployed in tmux session launch_healthmonitor"

        - stop:
          # remove all the tmux sessions
          - tmux kill-session -t launch_cameras
          - tmux kill-session -t launch_modules
          - tmux kill-session -t launch_inference
          - tmux kill-session -t launch_record
          - tmux kill-session -t launch_healthmonitor

        - rosclean:
          # stop all ros nodes
          - source $DEPLOY_WS/devel/perception/launch/setup.zsh
          - ps aux | grep ros
          - rosnode kill -a
          - pkill -f ros
          - rosnode list
          - ps aux | grep ros
