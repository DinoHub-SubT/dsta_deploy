####################################################################################################
- docker:
####################################################################################################
  # ssh into the remote robot
  - +ssh:developer:192.168.188.49:/home/katarina/.ssh/subt-vm/id_rsa
  - hostname
  - whoami
  - pwd

  # setup
  - 'export DEPLOY_WS=/home/$USER/deploy_ws'
  - 'export DEPLOY_SRC=/home/$USER/deploy_ws/src'
  - 'export DOCKER_CONFIG=subt/subt'
  - 'export DOCKER_CONFIG_PATH=docker/env'
  # config info -- print nicely, info about docker configuration
  - 'export BLUE="\033[1;36m"'
  - 'export YELLOW="\033[1;33m"'

  ####################################################
  # print docker configuration information
  ####################################################
  - config.build:
    - echo -e "\n${BLUE} == Docker images to create == \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
    - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
  - config.run:
    - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
    - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
    - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
    - while IFS= read line;
      do 
        echo -e ${BLUE} "\t$line";
      done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH"

  ####################################################
  # build docker images
  ####################################################
  - cd $DEPLOY_SRC/docker/scripts
  - build:
    - 'export BUILD_ARGS="--force" '
    - osrf:
      - echo $LANG
      - ./build.bash --env osrf/ros $BUILD_ARGS
      - ./build.bash --env osrf/osrf $BUILD_ARGS
    - subt:
      - ./build.bash --env subt/ros $BUILD_ARGS
      - ./build.bash --env subt/subt $BUILD_ARGS

  ####################################################
  # start docker images
  ####################################################
  - start:
    - 'export START_ARGS=" --no-nvidia " '
    - ./run.bash --env subt/subt $START_ARGS

  ####################################################
  # stop docker images
  ####################################################
  - stop:
    - 'export STOP_ARGS="--stop --containers " '
    - ./clean.bash --env subt/subt $STOP_ARGS
  
  - remove:
    - 'export REMOVE_ARGS="--remove --containers " '
    - ./clean.bash --env subt/subt $REMOVE_ARGS
  
  ####################################################
  # delete docker images & corresponding containers
  ####################################################
  - delete:
    - 'export DELETE_ARGS="--containers" '
    - ./clean.bash --env subt/subt $DELETE_ARGS
    - ./clean.bash --env subt/ros $DELETE_ARGS
    - ./clean.bash --env osrf/osrf $DELETE_ARGS
    - ./clean.bash --env osrf/ros $DELETE_ARGS
  
  ####################################################
  # misc.
  ####################################################
  - dangling:
    - docker rmi -f $(docker images -f "dangling=true" -q)
  - view:
    - docker ps
    - docker images

####################################################################################################
# dockerized deploy phases
####################################################################################################
- deploy:
  # dockerized 'phases' ** please add more here **
  - clone:
    - +ssh:developer:192.168.188.49:/home/$USER/.ssh/deploy/id_rsa
    - +dexec:subt:{ls -all, echo ""}:[-y build/field/example/robot.yaml, -s vm.clone, -v]
  - build:
    - +ssh:developer:192.168.188.49:/home/$USER/.ssh/deploy/id_rsa
    - +dexec:subt:{ls -all, echo ""}:[-y build/field/example/robot.yaml, -s vm.build, -v]
    
####################################################################################################
# clone workspaces
####################################################################################################
- vm.clone:
  - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
  - cd $DEPLOY_SRC/
  
  - submodule:
    # update the git submodule
    - git submodule init planning/planning_workspace/
    - git submodule update planning/planning_workspace/
  
  # clone & update the planning workspace
  - cd planning/
  - rosintsall:
      # setup the rosinstalls
    - ln -s planning_workspace/rosinstall/deploy/deploy.rosinstall .rosinstall
    - cd deps/catkin
    - ln -s ../../planning_workspace/rosinstall/deploy/deploy-deps.rosinstall .rosinstall
  - wstool:
    # wstool update the workspaces
    - repo:
      - wstool info
      - wstool update
    - deps:
      - cd deps/catkin
      - wstool info
      - wstool update
      - rosdep install --from-paths . --ignore-src --rosdistro melodic -y
  - rosdep:
    - deps:
      - cd deps/catkin
      # - rosdep install --from-paths . --ignore-src --rosdistro melodic -y
    - repo:
      - cd planning_workspace/
      - ./install_dependencies.sh
      # - rosdep install --from-paths . --ignore-src --rosdistro melodic -y
    

####################################################################################################
# build workspaces
####################################################################################################
- vm.build:
  - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
  - cd $DEPLOY_SRC/planning/
  
  # build the deps & planning workspaces
  - deps:
    # build deps workspace
    - cd deps/catkin
    - catkin init
    - catkin build
    - cd $DEPLOY_SRC/../install/
    - wget https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz
    - tar xf subt_robot_examples_latest.tgz -C deps --strip-components 1
  - ws:
    # build planning workspace
    - catkin init
    - catkin build

####################################################################################################
# clean workspaces
####################################################################################################
- clean:
  - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
  - cd $DEPLOY_SRC/planning/
  - rm .rosinstall
  - rm deps/catkin/.rosinstall
  - submodule:
    - git submodule deinit planning/planning_workspace/

####################################################################################################
# testing
####################################################################################################
- vm.clone.test:
  - echo "hello world1!"
  - echo "hello world2!"
  - ls -all
