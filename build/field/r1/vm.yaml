
- hello:
  - pwd

####################################################################################################
- docker:
  ####################################################################################################
  # ssh into the remote robot
  - +ssh:developer:192.168.188.49:/home/katarina/.ssh/subt-vm/id_rsa
  - hostname
  - whoami
  - pwd

  # setup
  - 'export DEPLOY_WS=/home/$USER/deploy_ws'
  - 'export DEPLOY_SRC=/home/$USER/deploy_ws/src'
  - 'export DOCKER_CONFIG=subt/subt'
  - 'export DOCKER_CONFIG_PATH=docker/env'
  # config info -- print nicely, info about docker configuration
  - 'export BLUE="\033[1;36m"'
  - 'export YELLOW="\033[1;33m"'

  ####################################################
  # print docker configuration information
  ####################################################
  - config.build:
    - echo -e "\n${BLUE} == Docker images to create == \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
    - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
    - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
  - config.run:
    - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
    - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
    - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
    - while IFS= read line;
      do 
        echo -e ${BLUE} "\t$line";
      done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH"

  ####################################################
  # build docker images
  ####################################################
  - cd $DEPLOY_SRC/docker/scripts
  - build:
    - 'export BUILD_ARGS="--force" '
    - osrf:
      - echo $LANG
      - ./build.bash --env osrf/ros $BUILD_ARGS
      - ./build.bash --env osrf/osrf $BUILD_ARGS
    - subt:
      - ./build.bash --env subt/ros $BUILD_ARGS
      - ./build.bash --env subt/subt $BUILD_ARGS

  ####################################################
  # start docker images
  ####################################################
  - start:
    - 'export START_ARGS=" --no-nvidia " '
    - ./run.bash --env subt/subt $START_ARGS

  ####################################################
  # stop docker images
  ####################################################
  - stop:
    - 'export STOP_ARGS="--stop --containers " '
    - ./clean.bash --env subt/subt $STOP_ARGS
  
  - remove:
    - 'export STOP_ARGS="--remove --containers " '
    - ./clean.bash --env subt/subt $STOP_ARGS
  
  ####################################################
  # delete docker images & corresponding containers
  ####################################################
  - delete:
    - 'export DELETE_ARGS="--containers" '
    - ./clean.bash --env subt/subt $DELETE_ARGS
    - ./clean.bash --env subt/ros $DELETE_ARGS
    - ./clean.bash --env osrf/osrf $DELETE_ARGS
    - ./clean.bash --env osrf/ros $DELETE_ARGS
  
  ####################################################
  # misc.
  ####################################################
  - dangling:
    - docker rmi -f $(docker images -f "dangling=true" -q)

####################################################
# execute
####################################################
- deploy:
  ##################################################################################################
  # dockerized phases ** please add more phases here **
  - clone:
    - +ssh:developer:192.168.188.49:/home/katarina/.ssh/subt-vm/id_rsa
    - +dexec:subt:{ls -all, echo ""}:[-y build/field/r1/vm.yaml, -s vm.clone.test, -v]
    # - +diexec:subt
  - build:
    - +ssh:developer:192.168.188.49:/home/katarina/.ssh/subt-vm/id_rsa
    - +dexec:subt:{ls -all, echo ""}:[-y build/field/r1/vm.yaml, -s vm.build, -v]
    # - +diexec:subt
    
##################################################################################################
- vm.clone.test:
  - echo "hello world1!"
  - echo "hello world2!"
  - ls -all
  
- repo.clone:
  - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
  - cd $DEPLOY_SRC/
  - 'echo "src dir is:  $SRC_DIR" '
  - cd planning/
  - catkin build
  - whoami
 # setup the clone
  - cd $DEPLOY_SRC/
  - 'echo "Cloning planning_ws"'
  - whoami
  - 'export DEPLOY_SRC=/home/$USER/deploy_ws/src'
  - cd $DEPLOY_SRC
  # update the git submodule
  - submodule:
    - git submodule init planning/planning_workspace/
    - git submodule update planning/planning_workspace/
  - cd planning/
  # setup the rosinstalls
  - rosintsall:
    - ln -s planning_workspace/rosinstall/deploy/deploy.rosinstall .rosinstall
    - cd deps/catkin
    - ln -s ../../planning_workspace/rosinstall/deploy/deploy-deps.rosinstall .rosinstall
  # wstool update deps & ws
  - wstool:
    - repo:
      - wstool info
      - wstool update
    - deps:
      - cd deps/catkin
      - wstool info
      - wstool update

##################################################################################################
- vm.build:
  # build the planning workspace (including any dependencies)
  - 'echo "Building planning_ws"'
  - 'echo "src dir is:  $SRC_DIR" '
  - cd planning/
  # build workspace deps
  - deps:
    - cd deps/catkin
    - catkin init
    - catkin build
    - cd $SRC_DIR/../install/
    - wget https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz
    - tar xf subt_robot_examples_latest.tgz -C deps --strip-components 1
  # build planning workspace
  - ws:
    # build workspace
    - catkin init
    - catkin build

##################################################################################################
- clean:
  - cd planning/
  - rm .rosinstall
  - rm deps/catkin/.rosinstall
  - submodule:
    - git submodule deinit planning/planning_workspace/

# needs to be root
# - builder:
#   - apt install python-pip
#   - pip install setuptools
#   - pip install --upgrade pip
#   - pip install pyyaml --user
#   - ./install-builder.bash --install
#   - ./builder --help
#   - $docker_exec bash -c 'cd $WS && ./install-builder.bash --install'
