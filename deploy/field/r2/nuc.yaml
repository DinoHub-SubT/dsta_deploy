####################################################################################################
# robot 2 configuration file
- r2:
####################################################################################################

  ##################################################################################################
  - nuc:
  ##################################################################################################
    - 'export YELLOW="\033[1;33m"'
    - 'export BLUE="\033[1;36m"'
    - 'export RESET="\033[0m"'

    # TODO: transfer when testing with basestation

    ################################################################################################
    - docker:
    ################################################################################################

      ####################################################
      # setup
      ####################################################
      - hostname
      - whoami
      - pwd
      
      ####################################################
      # path setup
      - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
      - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'
      - 'export DOCKER_CONFIG=field/r1/nuc'
      - 'export DOCKER_CONFIG_PATH=docker/env'
      
      ####################################################
      # print docker configuration information
      ####################################################
      - print.build:
        - echo -e "\n${BLUE} == Docker images to create == \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/r1/nuc.config \n" ;
        - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
      - print.run:
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
        - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
        - while IFS= read line;
          do 
            echo -e ${BLUE} "\t$line";
          done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - image:
        - 'export BUILD_ARGS="--force" '
        - osrf:
          - echo $LANG
          - ./build.bash --env local/osrf/ros $BUILD_ARGS
          - ./build.bash --env local/osrf/osrf $BUILD_ARGS
        - subt:
          - ./build.bash --env local/subt/ros $BUILD_ARGS
          - ./build.bash --env field/r1/nuc $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" --no-nvidia " '
        - ./run.bash --env field/r1/nuc $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/r1/nuc $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/r1/nuc $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - detlete:
        - 'export DELETE_ARGS="--containers" '
        - ./clean.bash --env field/r1/nuc $DELETE_ARGS
        - ./clean.bash --env local/subt/ros $DELETE_ARGS
        - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
        - ./clean.bash --env local/osrf/ros $DELETE_ARGS
      
      ####################################################
      # misc.
      ####################################################
      - dangling:
        - docker rmi -f $(docker images -f "dangling=true" -q)
      
    ################################################################################################
    - deploy:
    ################################################################################################
      # only docker container on basestation, no ssh
      - +docker:subt
      
      - hostname
      - whoami
      - pwd
      - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
      - 'export DEPLOY_WS=/home/developer/deploy_ws/'
      - cd $DEPLOY_SRC
  
      ####################################################
      # clone workspaces
      ####################################################
      - clone:

        # download the subt_robot_examples_latest
        # NOTE: only do this on ONCE. requires internet access.
        - download:
          - if [ -f subt_robot_examples_latest.tgz ]; then
              rm subt_robot_examples_latest.tgz;
            fi
          - wget --no-check-certificate https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz

        # clone & update the planning workspace
        - cd planning/
        
        # setup the rosinstalls
        - rosinstall:
          - planning:
            - darpa:
              - cd darpa/catkin
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/darpa.rosinstall .rosinstall
            - thirdparty:
              - cd thirdparty/catkin
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/thirdparty.rosinstall .rosinstall
            - repo:
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/planning.rosinstall .rosinstall
            - hardware:
              - cd hardware/catkin
              - if [ -f .rosinstall ]; then
                  rm .rosinstall;
                fi
              - ln -s $DEPLOY_SRC/rosinstall/planning/hardware.rosinstall .rosinstall
          - state_est:
            - cd $DEPLOY_SRC/state_estimation
            - repo:
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/state_est/state_est.rosinstall .rosinstall
            - thirdparty:
              - cd thirdparty/catkin
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/state_est/thirdparty.rosinstall .rosinstall
            - loam:
              - cd loam/catkin
              - if [ -f .rosinstall ]; then
                    rm .rosinstall;
                  fi
              - ln -s $DEPLOY_SRC/rosinstall/state_est/loam.rosinstall .rosinstall

        # wstool update the workspaces
        - wstool:
          - planning:
            - darpa:
              - cd darpa/catkin
              - wstool info
              - wstool update
            - thirdparty:
              - cd thirdparty/catkin
              - wstool info
              - wstool update
            - repo:
              - wstool info
              - wstool update
            - hardware:
              - cd hardware/catkin
              - wstool info
              - wstool update
          - state_est:
            - cd $DEPLOY_SRC/state_estimation
            - repo:
              - wstool info
              - wstool update
            - thirdparty:
              - cd thirdparty/catkin
              - wstool info
              - wstool update
            - loam:
              - cd loam/catkin
              - wstool info
              - wstool update

      ####################################################
      # rosdep
      # -- assumes the extended ws are already built
      # -- add only those repos that need rosdep
      ####################################################
      - rosdep:
        # install any thirdparty deps
        - cd planning
        - planning:
          - ./Planning_workspace/install_dependencies.sh
        - hardware:
          - source $DEPLOY_WS/devel/planning/hardware/setup.bash
          - cd $DEPLOY_SRC/state_estimation/thirdparty/catkin
          - rosdep install --from-paths . --ignore-src --rosdistro melodic -y
        - xsens:
          - cd $DEPLOY_SRC/state_estimation/xsens_cpp_driver/receive_xsens/config/mt_sdk
          - sudo ./mt_sdk_4.8.sh
        
      ####################################################
      # build workspaces
      ####################################################
      - build:
        - planning:
          - cd planning/

          # build the darpa workspaces
          - darpa:
            - cd darpa/catkin
            - catkin build
          
          # install the robot_examples
          - robot_examples:
            - cd $DEPLOY_WS/install/planning/
            - cp $DEPLOY_SRC/subt_robot_examples_latest.tgz .
            - tar xfv subt_robot_examples_latest.tgz -C darpa --strip-components 1

          # build the hardware workspace
          - thirdparty:
            - cd thirdparty/catkin
            - catkin build

          # build planning workspace
          - repo:
            - catkin build

          # build the hardware workspace
          - hardware:
            - cd hardware/catkin
            - catkin build

        # build the state_est
        - state_est:
          - cd $DEPLOY_SRC/state_estimation/
          - thirdparty:
            - cd thirdparty/catkin
            - catkin build
          - loam:
            - cd loam/catkin
            - catkin build
          - repo:
            # NOTE: temporary. modules requires CUDA flag, not set in nuc, so ignore.
            - touch object_detection/modules/CATKIN_IGNORE
            - catkin build
  
            # build launch workspace
            - launch:
              - cd $DEPLOY_SRC/launch/
              - catkin profile set state_est
              - catkin clean -b --yes
              - catkin build

      ####################################################
      # clean workspaces
      ####################################################
      - clean:
        - launch:
          - cd $DEPLOY_SRC/launch/
          - catkin clean -y
        - state_est:
          - cd $DEPLOY_SRC/state_estimation/
          - loam:
            - cd loam/catkin
            - catkin clean -y
          - thirdparty:
            - cd thirdparty/catkin
            - catkin clean -y
          - catkin clean -y
        - planning:
          - cd $DEPLOY_SRC/planning/
          - hardware:
            - cd hardware/catkin
            - catkin clean -y
          - repo:
            - catkin clean -y
          - thirdparty:
            - cd thirdparty/catkin
            - catkin clean -y
          - darpa:
            - cd darpa/catkin
            - catkin clean -y

      ####################################################
      # remove workspaces
      ####################################################
      - rm:
        - planning:
          - cd planning/
          - repo:
            - find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools \) -exec rm -rf '{}' \;
          - hardware:
            - cd hardware/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - darpa:
            - cd darpa/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - thirdparty:
            - cd thirdparty/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
        - state_est:
          - cd $DEPLOY_SRC/state_estimation/
          - repo:
            - find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name loam -o -name .catkin_tools \) -exec rm -rf '{}' \;
          - thirdparty:
            - cd thirdparty/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;
          - loam:
            - cd loam/catkin
            - find . -maxdepth 1 \! \( -name .catkin_tools \) -exec rm -rf '{}' \;

      ####################################################
      # launch workspaces
      ####################################################
      - launch:
        ### == user can modify ==
        
        # launch configuration variables
        - 'export host=$(hostname)'
        - 'export config=robots/r2/nuc'
        - 'export MCAST_GROUP=224.0.0.251'
        - 'export UGV_NUC=true'
        - 'export USER=nuc'
        
        ### == user can modify done. ==

        # read the launch configuration params
        - export config_data=""
        - export CONFIG_FILE="$DEPLOY_SRC/launch/robot_launch_scripting/config/${config}.config"
        - echo "CONFIG_FILE is ${CONFIG_FILE}"
        - while IFS='' read -r line || [[ -n "$line" ]]; do
            if [ ! "${line:0:1}" == "#" ]; then
              config_data="$config_data $line ";
            fi
          done < "$CONFIG_FILE";
        - echo ${config_data}

        - start:
          - roscore:
            # enable roscore
            - 'export ROS_MASTER=true'
            # start the tmux sessions
            - tmux new -s ${host}_check_roscore -d
            # source
            - tmux send -t ${host}_check_roscore 'source $DEPLOY_WS/devel/launch/setup.bash' ENTER
            # run roscore
            - tmux send -t ${host}_check_roscore 'rosrun robot_launch_scripting launch_roscore.sh' ENTER
            
          - subt:
            # start the tmux session
            - tmux new -s ${host}_launch_${config} -d
            # source
            - tmux send -t ${host}_launch_${config} 'source $DEPLOY_WS/devel/launch/setup.bash' ENTER
            # run planning-pc launch
            - tmux send -t ${host}_launch_${config} 'mon launch robot_launch_scripting subt.launch ${config_data}' ENTER
            # message user
            - echo "Launch deployed in tmux session ${host}_launch_${config}"
        
        # change sizes depending on host screen size.
        - view:
          - export TERM="xterm-256color"
          - stty size
          # - stty rows 60 cols 150
          - stty rows 30 cols 150
          - tmux a -t ${host}_launch_${config} 
        - stop:
          # remove all the tmux sessions
          - subt:
            - tmux kill-session -t ${host}_launch_${config}
          - roscore:  
            - tmux kill-session -t ${host}_check_roscore
          
        - rosclean:
          # stop all ros nodes
          - source $DEPLOY_WS/devel/planning/repo/setup.bash
          - ps aux | grep ros
          - rosnode kill -a
          - pkill -f ros
          - rosnode list
          - ps aux | grep ros


      ####################################################
      # git updater
      ####################################################
      - git:
        - update:
          - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
          - 'export DEPLOY_SRC=$DEPLOY_WS/src'
          
          # general git updater fn
          - git_updater() {
              for repo in $1; do
                echo "repo is $repo";
                pushd $repo  > /dev/null 2>&1;
                if [ -d .git ]; then
                  echo -e "\n${YELLOW}\trepo -> \t $(basename $repo) \n ${RESET}" ;
                  export GIT_COMMIT_HASH=$(git rev-parse --verify HEAD);
                  export ROSINSTALL_GIT_HASH=$(wstool info $(basename $repo) --yaml | grep -oP "version\K.*" | grep -oP " \K.*");
                  wstool set $(basename $repo) -v $GIT_COMMIT_HASH -y;
                  echo -e "\n\n";
                fi;
                popd  > /dev/null 2>&1;
              done;
            }
          - export -f git_updater
          
          # update the planning repso
          - planning:
            - cd $DEPLOY_SRC/planning
            - darpa:
              - cd darpa/catkin
              - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
              - git_updater "$REPOS"
            - thirdparty:
              - cd thirdparty/catkin
              - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
              - git_updater "$REPOS"
            - repo:
              - export REPOS=$(find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name hardware -o -name .catkin_tools -o -name .rosinstall \) )
              - git_updater "$REPOS"
          
          # update the planning repso
          - state_est:
            - cd $DEPLOY_SRC/state_estimation
            - darpa:
              - cd loam/catkin
              - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
              - git_updater "$REPOS"
            - thirdparty:
              - cd thirdparty/catkin
              - export REPOS=$(find . -maxdepth 1 \! \( -name .catkin_tools -o -name .rosinstall \) )
              - git_updater "$REPOS"
            - repo:
              - export REPOS=$(find . -maxdepth 1 \! \( -name darpa -o -name thirdparty -o -name loam -o -name .catkin_tools -o -name .rosinstall \) )
              - git_updater "$REPOS"

          