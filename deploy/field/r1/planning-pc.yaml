####################################################################################################
# robot 1 configuration file. for planning pc
- r1:
####################################################################################################

  ##################################################################################################
  - planning-pc:
  ##################################################################################################
    - 'export YELLOW="\033[1;33m"'
    - 'export BLUE="\033[1;36m"'

    ################################################################################################
    # copy deploy repo from basestation to r1.planning-pc
    - transfer:
    ################################################################################################
      
      ### == user can modify ==
      # testing setp

      # connections
      - 'export host=planning-pc'
      - 'export user=robot'
  
      # paths
      - 'export LOCAL_DEPLOY_PATH=/home/$USER/subt/deploy_ws/src'
      - 'export REMOTE_DEPLOY_PATH=/home/$user/deploy_ws/'
      
      # rsync options
      - 'export copy_opts="-avzh --exclude=src/perception" '
      - export copy_to="rsync $copy_opts $LOCAL_DEPLOY_PATH $user@$host:$REMOTE_DEPLOY_PATH "
      - export copy_from="rsync $copy_opts $user@$host:$REMOTE_DEPLOY_PATH $LOCAL_DEPLOY_PATH "

      ### == user can modify done. ==

      ####################################################
      # perform actual transfer. do not change.
      ####################################################
      - print:
        # print
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;
        - echo -e "\n${YELLOW}\t transfer to -> \t $copy_to \n" ;

      - transfer:
        - echo -e "\n${YELLOW}\t local deploy path -> \t $LOCAL_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t remote deploy path -> \t $REMOTE_DEPLOY_PATH \n" ;
        - echo -e "\n${YELLOW}\t host -> \t $host \n" ;
        - echo -e "\n${YELLOW}\t username -> \t $user \n" ;

        # transfer TO remote host
        - to:
          # create the remote directory
          - ssh $user@$host "mkdir -p $REMOTE_DEPLOY_PATH"

          # copy command
          - 'export copy_cmd=$copy_to'

        # transfer FROM remote host
        - from:
          - 'export copy_cmd=$copy_from'

        # evaluate copy
        - echo -e "\n${YELLOW}\t copy command -> \t $copy_cmd \n"
        - eval $copy_cmd
      
      # delete remote deploy workspace
      - delete:
        - ssh $user@$host "rm -rf $REMOTE_DEPLOY_PATH"

    ################################################################################################
    - docker:
    ################################################################################################
      ####################################################
      # ssh into the remote robot
      ####################################################
      - +ssh:{ robot:planning-pc:/home/mtatum/.ssh/planning_pc }
      
      ####################################################
      # setup
      ####################################################
      - hostname
      - whoami
      - pwd
      
      ####################################################
      # path setup
      - 'export DEPLOY_WS=/home/$(whoami)/deploy_ws/'
      - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src/'

      - 'export DOCKER_CONFIG=field/r1/planning-pc'
      - 'export DOCKER_CONFIG_PATH=docker/env'
      
      - submodule:
        - git submodule update docker

      ####################################################
      # print docker configuration information
      ####################################################
      - print.build:
        - echo -e "\n${BLUE} == Docker images to create == \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/r1/planning-pc.config \n" ;
        - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
      - print.run:
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/field/r1/planning-pc.config \n" ;
        - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
        - while IFS= read line;
          do 
            echo -e ${BLUE} "\t$line";
          done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - image:
        - 'export BUILD_ARGS="--force" '
        - osrf:
          - echo $LANG
          - ./build.bash --env local/osrf/ros $BUILD_ARGS
          - ./build.bash --env local/osrf/osrf $BUILD_ARGS
        - subt:
          - ./build.bash --env local/subt/ros $BUILD_ARGS
          - ./build.bash --env field/r1/planning-pc $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" --no-nvidia " '
        - ./run.bash --env field/r1/planning-pc $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/r1/planning-pc $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/r1/planning-pc $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - clean:
        - 'export DELETE_ARGS="--containers" '
        - ./clean.bash --env field/r1/planning-pc $DELETE_ARGS
        - ./clean.bash --env local/subt/ros $DELETE_ARGS
        - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
        - ./clean.bash --env local/osrf/ros $DELETE_ARGS
      
      ####################################################
      # misc.
      ####################################################
      - dangling:
        - docker rmi -f $(docker images -f "dangling=true" -q)
      
    ################################################################################################
    - deploy:
    ################################################################################################
      - +ssh:{ robot:planning-pc:/home/mtatum/.ssh/planning_pc }
      - +docker:subt
      
      - hostname
      - whoami
      - pwd
      - 'export DEPLOY_SRC=/home/$(whoami)/deploy_ws/src'
      - cd $DEPLOY_SRC

      ####################################################
      # remove workspaces
      ####################################################
      - remove:
        - cd /home/$(whoami)/deploy_ws
        - rm -rf deploy_ws

      ####################################################
      # clone workspaces
      ####################################################
      - clone:

        # update the git submodule
        - submodule:
          - git submodule init planning/planning_workspace/
          - git submodule update planning/planning_workspace/
          - git submodule update --recursive
        
        # clone & update the planning workspace
        - cd planning/
        
        # apt install any thirdparty deps
        - install_deps:
          - ./planning_workspace/install_dependencies.sh

        # setup the rosinstalls
        - rosinstall:
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s ../rosinstall/planning/planning.rosinstall .rosinstall
          - cd deps/catkin
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s ../../../rosinstall/planning/dependencies.rosinstall .rosinstall
        
        # wstool update the workspaces
        - wstool:
          - planning:
            - pwd
            - wstool info
            - wstool update
          - deps:
            - cd deps/catkin
            - wstool info
            - wstool update

      ####################################################
      # build workspaces
      ####################################################
      - build:
        - cd planning/
        
        # build the deps workspaces
        - deps:
          - cd deps/catkin
          - catkin build
        
        # install the robot_examples
        - robot_examples:
          - cd $DEPLOY_SRC/../install/planning/
          - wget https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz
          - tar xf subt_robot_examples_latest.tgz -C deps --strip-components 1
        
        # build planning workspace
        - planning:
          - catkin build base
          - catkin build

      ####################################################
      # clean workspaces
      ####################################################
      - clean:
        - cd planning/
        - planning:
          - catkin clean -y
        - deps:
          - cd deps/catkin
          - catkin clean -y

      ####################################################
      # remove workspaces
      # TODO: not done well enough, not tested
      ####################################################
      - remove:
        - cd planning/
        - if [ -f .rosinstall ]; then
            rm .rosinstall;
          fi
        - if [ -f deps/catkin/.rosinstall ]; then
            rm deps/catkin/.rosinstall
          fi
        - git:
          - git submodule deinit planning/planning_workspace/

      ####################################################
      # launch workspaces
      ####################################################
      - launch:
        ### == user can modify ==
        
        # launch configuration variables
        - 'export host=nuc'
        - 'export config=ugv1'

        ### == user can modify done. ==

        # read the launch configuration params
        - export config_data=""
        - export CONFIG_FILE="$DEPLOY_SRC/launch/robot_launch_scripting/config/$config.config"
        - while IFS='' read -r line || [[ -n "$line" ]]; do
            if [ ! "${line:0:1}" == "#" ]; then
              config_data="$config_data $line";
            fi
          done < "$CONFIG_FILE";
        - echo $config_data

        - init:
          # start the tmux sessions
          - tmux new -s ${host}_launch_$config -d
          - tmux new -s ${host}_check_roscore -d

        - start:
          # source the planning ws
          - tmux send -t ${host}_launch_$config 'source $DEPLOY_WS/devel/planning/repo/setup.bash'
          - tmux send -t ${host}_check_roscore 'source $DEPLOY_WS/devel/planning/repo/setup.bash'

          # launch commands to run planning ws
          - tmux send -t ${host}_launch_$config 'mon launch robot_launch_scripting ugv_config.launch $config_data' ENTER
          - tmux send -t ${host}_check_roscore 'rosrun robot_launch_scripting launch_roscore.sh' ENTER
          - echo "Launch deployed in tmux session ${host}_launch_$config"

        - stop:
          # stop ros
          - rosnode kill -a
          - pkill -f ros
          - rosnode list

        - clean:
          # remove all the tmux sessions
          - tmux kill-session -t ${host}_launch_$config
          - tmux kill-session -t ${host}_check_roscore
        
        - test.start:
          - tmux new  -s ${host}_launch_$config -d
          - tmux send -t ${host}_launch_$config 'export TEST_VAL=True ' ENTER
        
        - test.stop:
          - tmux kill-session -t ${host}_launch_$config


