####################################################################################################
# robot 1 configuration file
- r1:
####################################################################################################

  ##################################################################################################
  - basestation:
  ##################################################################################################
    - 'export YELLOW="\033[1;33m"'
    - 'export BLUE="\033[1;36m"'

    ################################################################################################
    - docker:
    ################################################################################################

      ####################################################
      # setup
      ####################################################
      - hostname
      - whoami
      - pwd
      
      ####################################################
      # path setup
      - 'export DEPLOY_WS=/home/$(whoami)/subt/deploy_ws/'
      - 'export DEPLOY_SRC=/home/$(whoami)/subt/deploy_ws/src/'
      - 'export DOCKER_CONFIG=field/r1/basestation'
      - 'export DOCKER_CONFIG_PATH=docker/env'
      
      ####################################################
      # print docker configuration information
      ####################################################
      - print.build:
        - echo -e "\n${BLUE} == Docker images to create == \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/osrf/osrf.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/subt/ros.config \n" ;
        - echo -e "\n${YELLOW}\tenv -> \t $DOCKER_CONFIG_PATH/field/r1/basestation.config \n" ;
        - echo -e "\n${YELLOW} ** Remember to always transfer any changed configuration files! ** \n";
      - print.run:
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG \n" ;
        - echo -e "\n${YELLOW}\t env -> \t $DOCKER_CONFIG_PATH/subt/subt.config \n" ;
        - echo -e "\n${YELLOW}\t subt remote env filepath -> \t $DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config \n"
        - while IFS= read line;
          do 
            echo -e ${BLUE} "\t$line";
          done < "$DEPLOY_SRC/$DOCKER_CONFIG_PATH/$DOCKER_CONFIG.config"

      ####################################################
      # build docker images
      ####################################################
      - cd $DEPLOY_SRC/docker/scripts
      - build:
        - 'export BUILD_ARGS="--force" '
        - osrf:
          - echo $LANG
          - ./build.bash --env local/osrf/ros $BUILD_ARGS
          - ./build.bash --env local/osrf/osrf $BUILD_ARGS
        - subt:
          - ./build.bash --env local/subt/ros $BUILD_ARGS
          - ./build.bash --env field/basestation $BUILD_ARGS

      ####################################################
      # start docker images
      ####################################################
      - start:
        - 'export START_ARGS=" --no-nvidia " '
        - ./run.bash --env field/basestation $START_ARGS

      ####################################################
      # stop docker images
      ####################################################
      - stop:
        - 'export STOP_ARGS="--stop --containers " '
        - ./clean.bash --env field/basestation $STOP_ARGS
      
      - remove:
        - 'export STOP_ARGS="--remove --containers " '
        - ./clean.bash --env field/basestation $STOP_ARGS
      
      ####################################################
      # delete docker images & corresponding containers
      ####################################################
      - clean:
        - 'export DELETE_ARGS="--containers" '
        - ./clean.bash --env field/basestation $DELETE_ARGS
        - ./clean.bash --env local/subt/ros $DELETE_ARGS
        - ./clean.bash --env local/osrf/osrf $DELETE_ARGS
        - ./clean.bash --env local/osrf/ros $DELETE_ARGS
      
      ####################################################
      # misc.
      ####################################################
      - dangling:
        - docker rmi -f $(docker images -f "dangling=true" -q)
      
    ################################################################################################
    - deploy:
    ################################################################################################
      # only docker container on basestation, no ssh
      - +docker:subt
      
      - hostname
      - whoami
      - pwd
      - 'export DEPLOY_SRC=/home/developer/deploy_ws/src'
      - cd $DEPLOY_SRC
  
      ####################################################
      # clone workspaces
      ####################################################
      - clone:

        # update the git submodule
        - submodule:
          - git submodule init planning/planning_workspace/
          - git submodule update planning/planning_workspace/

        
        # clone & update the planning workspace
        - cd planning/
        
        # apt install any thirdparty deps
        - install_deps:
          - ./planning_workspace/install_dependencies.sh

        # setup the rosinstalls
        - rosinstall:
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s planning_workspace/rosinstall/deploy/deploy.rosinstall .rosinstall
          - cd deps/catkin
          - if [ -f .rosinstall ]; then
              rm .rosinstall;
            fi
          - ln -s ../../planning_workspace/rosinstall/deploy/deploy-deps.rosinstall .rosinstall
        
        # wstool update the workspaces
        - wstool:
          - repo:
            - wstool info
            - wstool update
          - deps:
            - cd deps/catkin
            - wstool info
            - wstool update

      ####################################################
      # build workspaces
      ####################################################
      - build:
        - cd planning/
        
        # build the deps workspaces
        - deps:
          - cd deps/catkin
          - catkin build
        
        # install the robot_examples
        - robot_examples:
          - cd $DEPLOY_SRC/../install/planning
          - wget https://s3.amazonaws.com/osrf-distributions/subt_robot_examples/releases/subt_robot_examples_latest.tgz
          - tar xf subt_robot_examples_latest.tgz -C deps --strip-components 1
        
        # build planning workspace
        - ws:
          - catkin build

      ####################################################
      # clean workspaces
      ####################################################
      - clean:
        - cd planning/
        - repo:
          - catkin clean -y
        - deps:
          - cd deps/catkin
          - catkin clean -y

      ####################################################
      # remove workspaces
      ####################################################
      - remove:
        - cd planning/
        - if [ -f .rosinstall ]; then
            rm .rosinstall;
          fi
        - if [ -f deps/catkin/.rosinstall ]; then
            rm deps/catkin/.rosinstall
          fi
        - git:
          - git submodule deinit planning/planning_workspace/
      
      ####################################################
      # launch workspaces
      ####################################################
      - launch:
        ### == user can modify ==
        
        # launch configuration variables
        - 'export host=basestation'
        - 'export config=basestation'
        
        ### == user can modify done. ==
